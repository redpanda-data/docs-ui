<!DOCTYPE html>
<html lang="en">
  <head>
{{> head defaultPageTitle='Search the Documentation'}}
<link rel="stylesheet" href="{{{uiRootPath}}}/css/algolia/satellite-min.css">
<script src="{{{uiRootPath}}}/js/algolia/algoliasearch-lite.umd.js"></script>
<script src="{{{uiRootPath}}}/js/algolia/instantsearch.production.min.js"></script>
  </head>
  <body>
{{> header}}
<article class="search">
{{#with page.title}}
<h1 class="page">{{{this}}}</h1>
{{/with}}
<div class="ais-InstantSearch">
  <div class="right-panel">
    <div class="container">
      <div class="searchbox" id="searchbox"></div>
      <div class="search-panel__filters">
        Versions
        <div class="versions" id="version"></div>
      </div>
    </div>
    <div id="hits"></div>
    <div id="pagination"></div>
  </div>
</div>
</article>
{{> footer}}
<script>
if (typeof algoliasearch != "undefined" && typeof instantsearch != "undefined") {
  const { algoliasearch, instantsearch } = window;
  const { searchBox } = instantsearch.widgets;

  const searchClient = algoliasearch('{{{env.ALGOLIA_APP_ID}}}', '{{{env.ALGOLIA_API_KEY}}}');
  const indexName = '{{{env.ALGOLIA_INDEX_NAME}}}';

  const search = instantsearch({
      searchClient,
      indexName,
      routing: {
          stateMapping: {
              stateToRoute(uiState) {
                  const indexUiState = uiState[indexName];
                  return {
                      q: indexUiState.query,
                  }
              },
              routeToState({q}) {
                  return {
                      [indexName]: {
                          query: q,
                      },
                  };
              },
          },
      }
  });

  search.addWidgets([
    instantsearch.widgets.hits({
      container: '#hits',
      templates: {
        item(hit, { html, components, sendEvent }) {
          // Helper function to convert an array of objects to HTML links
          function arrayToHtmlLinks(array) {
            return array.map(item => `<a href="${item.u}">${item.t}</a>`).join(' ');
          }

          const breadcrumbsHtml = hit.breadcrumbs ? arrayToHtmlLinks(hit.breadcrumbs) : '';

          return `
            <div>
                <p class="ais-Heading"><a href="${hit.objectID}">${hit.title}</a></p>
                <p class="ais-Breadcrumbs">${breadcrumbsHtml}</p>
            </div>`;
        },
      },
    }),

      instantsearch.widgets.refinementList({
        container: '#version', // the CSS Selector of the DOM element inside which the widget is inserted.
        attribute: 'version',  // the name of the attribute in the records.
        /*templates: {
          item(item, { html }) {
            const { url, label, count, isRefined } = item;

            return html`
              <a href="${url}" style="${isRefined ? 'font-weight: bold' : ''}">
                <span>${label} (${count})</span>
              </a>
            `;
          },
        },*/
      }),
      instantsearch.widgets.configure({
          hitsPerPage: 20,
          //facetFilters: [`lang:${currentLang}`],
          //queryLanguages: [currentLang]
      }),
      instantsearch.widgets.pagination({
          container: '#pagination',
      }),
      searchBox({
        container: '#searchbox',
      }),
  ]);

  search.start();
}
</script>
  </body>
</html>