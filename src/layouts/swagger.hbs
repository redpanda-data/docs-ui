<!DOCTYPE html>
<html lang="en">
  <head>
    {{> head defaultPageTitle='API Reference'}}
    <meta charset="utf-8">
    <script type="module" src="https://unpkg.com/rapidoc/dist/rapidoc-min.js"></script>
    {{> header-scripts}}
  </head>
  <body class="body swagger" style="padding-top:0; height:100vh;">
    <rapi-doc id="api" spec-url="{{resolve-resource page.attributes.api-spec-url}}" primary-color="#e2401b"
        show-header=false {{#if page.attributes.try-it}}allow-try=true {{else}} allow-try=false {{/if}} show-curl-before-try=true show-method-in-nav-bar="as-colored-block" show-info="true" render-style="read" regular-font="'Calibre Regular', 'Open Sans', arial, helvetica, sans-serif" fill-request-fields-with-example="true" nav-bg-color="#fff"  bg-color="#fff" nav-item-spacing="relaxed" font-size="largest" fetch-credentials="include" css-file="{{{uiRootPath}}}/css/site.css"  css-classes="swagger">
    <div class="toolbar" role="navigation" style="top:-5px;">
      {{#with site.homeUrl}}
      {{#if (ne @root.page.component.name 'redpanda-labs')}}
      <a href="{{{relativize this}}}" aria-label="Go to home page" class="home-link{{#if @root.page.home}} is-current{{/if}}"></a>
      {{/if}}
      {{/with}}
    {{> breadcrumbs}}
    {{#if is-cloud-url}}
      {{> api-feedback}}
    {{/if}}
    </div>
    <div slot="nav-logo" style="display: flex; align-items: center; justify-content: center;">
      <a class="navbar-item" href="{{{or site.url siteRootPath}}}" aria-label="Go to home page"><img src="{{{uiRootPath}}}/img/redpanda-docs-logo.svg" width="250px" height= "30px" alt="Redpanda logo"/></a>
    </div>
    {{#each (get-api-slots page.url)}}
        {{{this}}}
    {{/each}}
    <div slot="footer">
      {{> footer}}
    </div>
    {{> tracking-pixel}}
    </rapi-doc>
    <script defer>
      function getNavbarHeight() {
          const navbar = document.querySelector('.toolbar');
          if (!navbar) {
            console.error('Toolbar not found.');
            return null;
          }
          const style = window.getComputedStyle(navbar);
          const height = parseFloat(style.height);
          return height;
      }

      window.addEventListener('DOMContentLoaded', function() {
        const height = getNavbarHeight();
        const rapidoc = document.querySelector('rapi-doc#api');
        if (rapidoc && rapidoc.shadowRoot) {
          // Hide the client ID
          const observer = new MutationObserver(function(mutationsList, observer) {
            mutationsList.forEach(mutation => {
              mutation.addedNodes.forEach(node => {
                if (node.nodeType === Node.ELEMENT_NODE) {
                  const targetElement = node.querySelector('.oauth2.implicit.auth0.oauth-client-id');
                  if (targetElement) {
                    targetElement.style.display = 'none';
                    observer.disconnect();
                  }
                  const subTitleDivs = node.querySelectorAll('.sub-title');
                  subTitleDivs.forEach(div => {
                    const h2 = document.createElement('h2');
                    h2.innerHTML = div.innerHTML;
                    const partAttribute = div.getAttribute('part');
                    if (partAttribute) {
                      h2.setAttribute('part', partAttribute);
                    }
                    div.parentNode.replaceChild(h2, div);
                  });
                  const headingElements = Array.from(node.querySelectorAll('h2:not(div.sect > h2), h3:not(div.sect > h3), h4:not(div.sect > h4)'));
                  headingElements.forEach(heading => {
                    if (!heading.closest('.sect')) {
                      heading.style.fontSize = 'revert';
                      heading.style.paddingTop = 'revert';
                      heading.style.marginBlockEnd = 'revert';
                    }
                  });
                  const tables = node.querySelectorAll('table');
                  tables.forEach(table => {
                    table.classList.add('tableblock', 'stripes-odd');
                    table.style.width = '100%';
                  });
                }
              });
            });
          });
          observer.observe(rapidoc.shadowRoot, { childList: true, subtree: true });
          rapidoc.style.marginTop = height + 'px'; // Adjusts the top margin based on the navbar's height
          rapidoc.addEventListener('before-try', (e) => {
            const message = "Warning: API calls are executed against a real environment, not a sandbox.\nAre you sure you want to send this Delete request?"
            if (e.detail.request.method === 'DELETE') {
              if (!confirm(message)) {
                e.detail.controller.abort();
              }
            }
          });
        }
      });

      let resizeTimeout;
      function debouncedApplyMobileLogic() {
          clearTimeout(resizeTimeout);
          resizeTimeout = setTimeout(applyMobileLogic, 250);
      }

      function applyMobileLogic() {
          const rapidocEl = document.getElementById('api');
          if (window.innerWidth <= 768) {
            rapidocEl.setAttribute('render-style', 'view');
          } else {
            rapidocEl.setAttribute('render-style', 'read');
          }
      }

      window.addEventListener('DOMContentLoaded', applyMobileLogic);
      window.addEventListener('resize', debouncedApplyMobileLogic);
    </script>
  </body>
</html>
