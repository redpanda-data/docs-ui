<script>
function createEditablePlaceholders () {
  const codeElements = document.querySelectorAll("pre > code");

  for (let i = 0; i < codeElements.length; i++) {
    const codeElement = codeElements[i];
    addEditableSpan(/&lt;.[^&A-Z]*&gt;/g, codeElement);
  }
}

if (!RegExp.escape) {
  RegExp.escape = function(s) {
    return s.replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
  };
}

function addEditableSpan(regex, element) {
  if (!element || !element.textContent) {
    return;
  }
  var html = element.innerHTML;
  var placeholders = html.match(regex) || []
  var processed = {}
  for (const placeholder of placeholders) {
    const placeholdersNoSpan = placeholder.replace(/<[^>]*>/g, '');
    const cleanedPlaceholder = placeholdersNoSpan.replace(/&lt;|&gt;/g, '');
    if (processed[cleanedPlaceholder]) {
      const regexString = '(?<!onclick="removeCursor\\(event\\)">)(' + RegExp.escape(placeholder) + ')';
      const regex = new RegExp(regexString, 'g');
      html = element.innerHTML;
      if (html.match(regex)) {
        html = html.replace(regex, `<span contenteditable="true" data-type="${cleanedPlaceholder}" onclick="removeCursor(event)">&lt;${cleanedPlaceholder}&gt;</span><span class="cursor"></span>`);
        element.innerHTML = html
        continue;
      }
    }
    processed[cleanedPlaceholder] = cleanedPlaceholder
    html = html.replace(placeholder, `<span contenteditable="true" data-type="${cleanedPlaceholder}" onclick="removeCursor(event)">&lt;${cleanedPlaceholder}&gt;</span><span class="cursor"></span>`);
    element.innerHTML = html
  }
}



function removeCursor (element) {
  if (element.target) {
    element = element.target
  }
  if (element.contentEditable == 'true') {
    element.nextElementSibling.classList.remove('cursor');
  } else {
    element.parentElement.nextElementSibling.classList.remove('cursor');
  }
}

function addClasses () {
  const editablePlaceholders = document.querySelectorAll('[contenteditable="true"], [contenteditable="true"] span');

  editablePlaceholders.forEach((placeholder) => {
    placeholder.classList.add('editable');
    placeholder.addEventListener('input', function(event) {
      const dataType = event.target.dataset.type;
      const newText = event.target.textContent;

      document.querySelectorAll(`[data-type="${dataType}"][contenteditable="true"]`).forEach(span => {
        if (span !== event.target) {
          span.textContent = newText;
        }
      });
    });
  });
}

function addEvents() {
  const editablePlaceholders = document.querySelectorAll('[contenteditable="true"], [contenteditable="true"] span');

  editablePlaceholders.forEach((placeholder) => {
    placeholder.addEventListener('input', function(event) {
      const dataType = event.target.dataset.type;
      const newText = event.target.textContent;

      document.querySelectorAll(`[data-type="${dataType}"][contenteditable="true"]`).forEach(span => {
        if (span !== event.target) {
          span.textContent = newText;
          removeCursor(span)
        }
      });
    });
  });
}

window.onload = function() {
  try {
    createEditablePlaceholders();
    addClasses()
    addEvents()
  } catch (error) {
    console.error('An error occurred while making placeholders editable:', error);
  }
};
</script>