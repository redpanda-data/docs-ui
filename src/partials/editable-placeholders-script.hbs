<script>
function makePlaceholdersEditable(element) {
  createEditablePlaceholders(element);
  unnestPlaceholders()
  addClasses(element)
  addEvents(element)
}

function createEditablePlaceholders(parentElement) {
  const baseElement = parentElement || document;
  const codeElements = baseElement.querySelectorAll("pre > code");

  for (let i = 0; i < codeElements.length; i++) {
    const codeElement = codeElements[i];
    addConumSpans(codeElement);
    if(codeElement.dataset.lang !== 'xml' && codeElement.dataset.lang !== 'html') {
      addEditableSpan(/&lt;.[^&A-Z]+&gt;/g, codeElement);
    }
  }
}

if (!RegExp.escape) {
  RegExp.escape = function(s) {
    return s.replace(/[\\^$*+?.()|[\]{}]/g, '\\$&');
  };
}

function unnestPlaceholders() {
  const editables = document.querySelectorAll('[contenteditable="true"]');

  editables.forEach(editable => {
    if (editable.parentElement && editable.parentElement.getAttribute('contenteditable') === 'true') {
      editable.parentElement.replaceWith(editable);
    }
  });
}

function addEditableSpan(regex, element) {
  if (!element || !element.textContent) {
    return;
  }
  const text = element.innerHTML;
  const placeholders = text.match(regex) || [];
  const processed = new Set();
  let newHTML = text;
  const sortedPlaceholders = placeholders.sort((a, b) => b.length - a.length);
  for (const placeholder of sortedPlaceholders) {
    const cleanedPlaceholder = placeholder.replace(/<[^>]*>/g, '').replace(/&lt;|&gt;/g, '');
    if (processed.has(placeholder) || cleanedPlaceholder === 'none') {
      continue;
    }
    const regexString = RegExp.escape(placeholder);
    const globalRegex = new RegExp(regexString, 'g');
    newHTML = newHTML.replace(globalRegex, `<span contenteditable="true" data-type="${cleanedPlaceholder}" onclick="removeCursor(event)">&lt;${cleanedPlaceholder}&gt;</span><span class="cursor"></span>`);
    processed.add(placeholder);
  }
  element.innerHTML = newHTML;
}

function addConumSpans(element) {
  if (!element || !element.textContent) {
    return;
  }
  let codeContent = element.innerHTML;

  // Patterns:
  // 1. For numbers inside brackets wrapped within spans.
  // 2. For direct numbers inside brackets.
  let patterns = [
    /<span class="token punctuation">\(<\/span><span class="token number">(\d+)<\/span><span class="token punctuation">\)<\/span>\s*(?:\n)?$/gm,
    /\((\d+)\)\s*(?:\n)?$/gm
  ];

  patterns.forEach(pattern => {
    codeContent = codeContent.replace(pattern, '<i class="conum" data-value="$1"></i>');
  });

  element.innerHTML = codeContent;
}


function removeCursor(element) {
  if (element.target) {
    element = element.target;
  }

  if (element.contentEditable === 'true' && element.nextElementSibling) {
    element.nextElementSibling.classList.remove('cursor');
  } else if (element.parentElement && element.parentElement.nextElementSibling) {
    element.parentElement.nextElementSibling.classList.remove('cursor');
  }
}

function addClasses(parentElement) {
  const baseElement = parentElement || document;
  const editablePlaceholders = baseElement.querySelectorAll('[contenteditable="true"]');

  editablePlaceholders.forEach((placeholder) => {
    placeholder.classList.add('editable');
  });
}

function addEvents(parentElement) {
  const baseElement = parentElement || document;
  const editablePlaceholders = baseElement.querySelectorAll('[contenteditable="true"]');
  editablePlaceholders.forEach((placeholder) => {
    placeholder.addEventListener('input', function(event) {
      const dataType = event.target.dataset.type;
      const newText = event.target.textContent;

      document.querySelectorAll(`[data-type="${dataType}"][contenteditable="true"]`).forEach(span => {
        // Check if the span is within a hidden tab
        let hasHiddenAncestor = false
        let ancestor = span.parentElement
        while (ancestor) {
            if (ancestor.classList.contains('tabpanel') && ancestor.classList.contains('is-hidden')) {
                hasHiddenAncestor = true
                break
            }
            ancestor = ancestor.parentElement
        }
        // Update the text if the span isn't within a hidden tab
        if (!hasHiddenAncestor && span !== event.target) {
            span.textContent = newText
            removeCursor(span)
        }
      });
    });
  })
}

window.onload = function() {
  try {
    makePlaceholdersEditable()
  } catch (error) {
    console.error('An error occurred while making placeholders editable:', error);
  }
};
</script>