{{{page.contents}}}
<!-- Action buttons -->
<div class="button-bar">
  <button id="clear" class="button">Clear</button>
  <button id="prettify" class="button">Format input</button>
  <select id="sample-dropdown" class="button">
    {{#each (obj page.attributes.bloblang-samples) }}
    <option value="{{this.title}}">{{this.title}}</option>
    {{/each}}
  </select>
</div>
<div class="playground-container">
  <!-- Editors -->
  <section class="editors">

    <!-- Editor containers -->
    <div class="editor-container">
      <!-- Input editor -->
      <details open>
        <summary>Input</summary>
        <div class="editor" id="ace-input" contenteditable="true"></div>
      </details>
      <details open>
        <summary>Input metadata</summary>
        <div class="editor" id="ace-input-metadata" contenteditable="true"></div>
      </details>

      <!-- Mapping editor -->
      <details open>
        <summary>Mapping</summary>
        <div class="editor" id="ace-mapping" contenteditable="true"></div>
      </details>
    </div>
  </section>

  <!-- Output -->
  <section class="output-section">
    <div class="editor-container">
      <details open>
        <summary>Output</summary>
        <div class="editor" id="ace-output">"Output will appear here..."</div>
      </details>
      <details open>
      <summary>Output metadata</summary>
        <div class="editor" id="ace-metadata">"Metadata will appear here..."</div>
      </details>
    </div>
  </section>
</div>
<div id="bloblang-banner" class="banner">
  Enjoying the Bloblang playground? Sign up to get updates about new features:
  <form  data-netlify="true" name="bloblang-emails" method="POST" netlify-honeypot="bot-field" id="bloblang-form" class="banner-form">
    <input type="email" name="email" id="bloblang-email" placeholder="Enter your email" required />
    <button class="button" type="submit">Sign up</button>
    <button  class="button" type="button" id="dismiss-banner">No thanks</button>
  </form>
</div>
<script>
let aceInputEditor, aceMappingEditor, aceOutputEditor,metadataDetails, choices;
const TAB_SIZE = 2;

// Keys for sessionStorage
const sessionStorageKeys = {
  input: "blobl-editor-input",
  metadata: "blobl-editor-metadata",
  mapping: "blobl-editor-mapping",
};

// Default values for editors
const defaultInput = `{
  "numbers": [1, 2, 3, 4, 5]
}`;
const defaultMetaInput = "{}";
const defaultMapping = `root.even_numbers = this.numbers.filter(n -> n % 2 == 0)
root.sum = this.numbers.sum()`;
const defaultOutput = "Output will appear here...";
const defaultMetaOutput = "Output metadata will appear here...";

// Initialize ACE Editors
function initializeAceEditor(editorId, mode, readOnly = false, initialValue = '') {
  const editor = ace.edit(editorId);
  editor.setTheme('ace/theme/github');
  editor.session.setMode(mode);
  editor.setReadOnly(readOnly);
  editor.setValue(prettifyJSON(initialValue), 1);
  editor.session.setTabSize(TAB_SIZE);
  editor.session.setUseSoftTabs(true);
  editor.setOptions({
    minLines: 1, // Minimum height
    maxLines: 50, // Allow growth
  });
  return editor;
}

function prettifyJSON(json) {
  try {
    return JSON.stringify(JSON.parse(json), null, 2);
  } catch (error) {
    return json; // Return original value if it's not valid JSON
  }
}

document.addEventListener("DOMContentLoaded", () => {
  metadataDetails = document.getElementById("metadata-details");
  const banner = document.getElementById("bloblang-banner");
  const form = document.getElementById("bloblang-form");
  const dismissButton = document.getElementById("dismiss-banner");
  if (sessionStorage.getItem("bloblangBannerDismissed") === "true" && banner) {
    banner.style.display = "none";
  }

  // Initialize input editor
  aceInputEditor = initializeAceEditor("ace-input", 'ace/mode/json', false, defaultInput);

  // Initialize input metadata editor
  aceInputMetadataEditor = initializeAceEditor("ace-input-metadata", 'ace/mode/json', false, defaultMetaInput);

  // Initialize mapping editor
  aceMappingEditor = initializeAceEditor("ace-mapping", 'ace/mode/coffee', false, defaultMapping);

  // Initialize output editor
  aceOutputEditor = initializeAceEditor("ace-output", 'ace/mode/text', true, defaultMapping);

  // Initialize metadata editor
  aceOutputMetadataEditor = initializeAceEditor("ace-metadata", 'ace/mode/text', true, defaultMetaOutput);

  choices = new Choices(document.getElementById("sample-dropdown"), {
    searchEnabled: true,
    searchPlaceholderValue: 'Search examples',
    placeholderValue: 'Select an example',
    allowHTML: true
  });

  const go = new Go();
  WebAssembly.instantiateStreaming(fetch("{{{siteRootPath}}}/blobl.wasm"), go.importObject)
    .then((result) => {
      go.run(result.instance);
      restoreFromStorage();
      execute();
    })
    .catch(console.error);

  // Handle clear button
  document.getElementById("clear").addEventListener("click", () => {
    aceInputEditor.setValue("");
    aceMappingEditor.setValue("");
    aceInputMetadataEditor.setValue("")
    aceOutputEditor.setValue(defaultOutput, 1);
    aceOutputMetadataEditor.setValue(defaultMetaOutput, 1);
    saveTosessionStorage();
  });

  // Handle prettify button
  document.getElementById("prettify").addEventListener("click", () => {
    try {
      const formattedInput = JSON.stringify(JSON.parse(aceInputEditor.getValue()), null, 2);
      const formattedInputMetadata = JSON.stringify(JSON.parse(aceInputMetadataEditor.getValue()), null, 2);
      aceInputEditor.setValue(formattedInput, 1);
      saveTosessionStorage();
      aceInputMetadataEditor.setValue(formattedInputMetadata, 1);
      saveTosessionStorage();
    } catch (error) {
      aceOutputEditor.setValue("Error: Invalid JSON input", 1);
    }
  });

  const samples = {{{page.attributes.bloblang-samples}}};

  // Handle dropdown for examples
  document.getElementById("sample-dropdown").addEventListener("change", (event) => {
    const selectedSample = event.target.value;
    const sample = Object.values(samples).find((sample) => sample.title === selectedSample);

    if (sample) {
      aceInputEditor.setValue(sample.input, 1);
      aceMappingEditor.setValue(sample.mapping, 1);
      aceInputMetadataEditor.setValue(sample.metadata || defaultMetaInput, 1);
      execute();
      saveTosessionStorage();
    }
  });

  // Save content to sessionStorage and execute on changes
  [aceInputEditor, aceInputMetadataEditor, aceMappingEditor].forEach((editor) => {
    editor.on("change", saveTosessionStorage);
    editor.on("change", execute);
  });
  if (dismissButton) {
    dismissButton.addEventListener("click", () => {
      banner.style.display = "none";
      sessionStorage.setItem("bloblangBannerDismissed", "true");
    });
  }
  if (form) {
    form.addEventListener("submit", (event) => {
      event.preventDefault();

      const formData = new FormData(form);
      const email = form.querySelector('input[name="email"]').value;

      if (!email) {
        return;
      }

      formData.set("email", email);

      fetch("{{page.url}}", {
        method: "POST",
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
        body: new URLSearchParams(formData).toString(),
      })
        .then(() => {
          console.log("Form submission success");
          banner.innerHTML = "Thank you! Your email has been submitted.";
          setTimeout(() => {
            banner.style.display = "none";
            sessionStorage.setItem("bloblangBannerDismissed", "true");
          }, 3000);
        })
        .catch((error) => {
          console.error("Form submission error:", error);
        });
    });
  }
});

// Function to get input and mapping values
function getInput() {
  return aceInputEditor ? aceInputEditor.getValue() : "";
}

function getMapping() {
  return aceMappingEditor ? aceMappingEditor.getValue() : "";
}

function getInputMetadata() {
  return aceInputMetadataEditor ? aceInputMetadataEditor.getValue() : "";
}

function isValidJSON(str) {
  try {
    JSON.parse(str);
    return true;
  } catch (e) {
    return false;
  }
}

// Function to execute the mapping
function execute() {
  if (!metadataDetails) metadataDetails = document.getElementById("metadata-details");

  aceOutputEditor.setValue("");
  aceOutputMetadataEditor.setValue("");

  try {
    const result = blobl(getMapping(), getInput(), getInputMetadata());

    if (isValidJSON(result)) {
      const parsedResult = JSON.parse(result);

      // Separate message and metadata
      const message = parsedResult.msg || parsedResult;
      const metadata = parsedResult.meta || {};

      // Display message output
      aceOutputEditor.session.setMode("ace/mode/json");
      aceOutputEditor.setValue(JSON.stringify(message, null, 2), 1);

      // Display metadata
      if (Object.keys(metadata).length > 0) {
        aceOutputMetadataEditor.session.setMode("ace/mode/json");
        aceOutputMetadataEditor.setValue(JSON.stringify(metadata, null, 2), 1);
      } else {
        aceOutputMetadataEditor.session.setMode("ace/mode/text");
        aceOutputMetadataEditor.setValue("{}", 1);
      }
    } else {
      // If the result is not JSON, handle it as raw text
      aceOutputEditor.session.setMode("ace/mode/text");
      aceOutputEditor.setValue(result, 1);

      aceOutputMetadataEditor.session.setMode("ace/mode/text");
      aceOutputMetadataEditor.setValue("No metadata available", 1);
    }
  } catch (error) {
    // Handle general errors
    aceOutputEditor.session.setMode("ace/mode/text");
    aceOutputEditor.setValue("Error: " + error.message, 1);

    aceOutputMetadataEditor.session.setMode("ace/mode/text");
    aceOutputMetadataEditor.setValue("Error: " + error.message, 1);
  }
}

// Save editor content to sessionStorage
function saveTosessionStorage() {
  sessionStorage.setItem(sessionStorageKeys.input, aceInputEditor.getValue());
  sessionStorage.setItem(sessionStorageKeys.mapping, aceMappingEditor.getValue());
  sessionStorage.setItem(sessionStorageKeys.metadata, aceInputMetadataEditor.getValue());
}

// Restore editor content from sessionStorage
function restoreFromStorage() {
  const savedInput = sessionStorage.getItem(sessionStorageKeys.input);
  const savedMapping = sessionStorage.getItem(sessionStorageKeys.mapping);
  const savedMeta = sessionStorage.getItem(sessionStorageKeys.metadata);
  const dropdownElement = document.getElementById("sample-dropdown");

  const samples = {{{page.attributes.bloblang-samples}}};

  if (!savedInput && !savedMapping) {
    // Default to "Array processing" if storage is empty
    const defaultSample = Object.values(samples).find((sample) => sample.title === "Array processing");

    if (defaultSample) {
      aceInputEditor.setValue(defaultSample.input, 1);
      aceMappingEditor.setValue(defaultSample.mapping, 1);
      defaultSample.metadata ? aceInputMetadataEditor.setValue(defaultSample.metadata, 1) : aceInputMetadataEditor.setValue(defaultMetaInput, 1)
      choices.setChoiceByValue(defaultSample.title)
    } else {
      aceInputEditor.setValue(defaultInput, 1);
      aceMappingEditor.setValue(defaultMapping, 1);
      aceInputMetadataEditor.setValue(defaultMetaInput, 1);
      choices.setChoiceByValue("");
    }
  } else {
    // Restore values from storage
    aceInputEditor.setValue(savedInput || defaultInput, 1);
    aceMappingEditor.setValue(savedMapping || defaultMapping, 1);
    aceInputMetadataEditor.setValue(savedMeta || defaultMetaInput, 1);

    // Find and select the corresponding dropdown option
    const matchingSample = Object.values(samples).find(
      (sample) => sample.input === savedInput && sample.mapping === savedMapping
    );

    if (matchingSample) {
      choices.setChoiceByValue(matchingSample.title);
    } else {
      choices.setChoiceByValue("");
    }
  }

  aceOutputEditor.setValue(defaultOutput, 1);
  aceOutputMetadataEditor.setValue(defaultMetaOutput, 1);
}

</script>
