<!-- Action buttons -->
<div class="button-bar">
  <button id="clear" class="button">Clear</button>
  <button id="prettify" class="button">Format input</button>
  <select id="sample-dropdown" class="button">
    {{#each (obj page.attributes.bloblang-samples) }}
    <option value="{{this.title}}">{{this.title}}</option>
    {{/each}}
  </select>
</div>
<div class="playground-container">
  <!-- Editors -->
  <section class="editors">

    <!-- Editor containers -->
    <div class="editor-container">
      <!-- Input editor -->
      <details open>
        <summary>Input (JSON)</summary>
        <div class="editor" id="ace-input" contenteditable="true">{ "message": "hello world" }</div>
      </details>

      <!-- Mapping editor -->
      <details open>
        <summary>Mapping</summary>
        <div class="editor" id="ace-mapping" contenteditable="true">root = this</div>
      </details>
    </div>
  </section>

  <!-- Output -->
  <section class="output-section">
    <div class="editor-container">
        <P>Output</P>
        <div class="editor" id="ace-output">"Output will appear here..."</div>
      </div>
  </section>
</div>
<script>
let aceInputEditor, aceMappingEditor;
const outputConsole = document.getElementById("ace-output");

// Keys for localStorage
const localStorageKeys = {
  input: "blobl-editor-input",
  mapping: "blobl-editor-mapping",
};

function getInput() {
    return aceInputEditor ? aceInputEditor.getValue() : "";
}

function getMapping() {
    return aceMappingEditor ? aceMappingEditor.getValue() : "";
}

// Default values for input and mapping editors
const defaultInput = '{ "message": "hello world" }';
const defaultMapping = "root = this";

// Function to display output or error messages
function execute() {
    outputConsole.innerHTML = "";
    try {
      const result = blobl(getMapping(), getInput());
      outputConsole.textContent = result;
    } catch (error) {
      outputConsole.textContent = "Error: " + error.message;
    }
}

// Save editor content to localStorage
function saveToLocalStorage() {
    localStorage.setItem(localStorageKeys.input, aceInputEditor.getValue());
    localStorage.setItem(localStorageKeys.mapping, aceMappingEditor.getValue());
}

// Restore editor content from localStorage
function restoreFromLocalStorage() {
    const savedInput = localStorage.getItem(localStorageKeys.input);
    const savedMapping = localStorage.getItem(localStorageKeys.mapping);

    if (savedInput) {
        aceInputEditor.setValue(savedInput, 1);
    } else {
        aceInputEditor.setValue(defaultInput, 1);
    }

    if (savedMapping) {
        aceMappingEditor.setValue(savedMapping, 1);
    } else {
        aceMappingEditor.setValue(defaultMapping, 1);
    }
}

// Add event listeners for buttons
document.getElementById("clear").addEventListener("click", () => {
    aceInputEditor.setValue("");
    aceMappingEditor.setValue("");
    outputConsole.textContent = "Output will appear here...";
    saveToLocalStorage(); // Clear storage as well
});

document.getElementById("prettify").addEventListener("click", () => {
  try {
    const formatted = JSON.stringify(JSON.parse(aceInputEditor.getValue()), null, 2);
    aceInputEditor.setValue(formatted, 1);
      saveToLocalStorage();
  } catch (error) {
    outputConsole.textContent = "Error: Invalid JSON input";
  }
});

const samples = {{{page.attributes.bloblang-samples}}};

document.getElementById("sample-dropdown").addEventListener("change", (event) => {
  const selectedSample = event.target.value;

  // Search for the sample by title
  const sample = Object.values(samples).find(sample => sample.title === selectedSample);

  if (sample) {
    aceInputEditor.setValue(sample.input, 1);
    aceMappingEditor.setValue(sample.mapping, 1);
    execute();
  }
});


const go = new Go();
WebAssembly.instantiateStreaming(fetch("{{{siteRootPath}}}/blobl.wasm"), go.importObject).then(result => {
    go.run(result.instance);
     // Restore editor content on load
    restoreFromLocalStorage();
    execute();
}).catch(console.error);

document.addEventListener("DOMContentLoaded", () => {
    aceInputEditor = ace.edit("ace-input");
    aceInputEditor.setTheme("ace/theme/github");
    aceInputEditor.session.setMode("ace/mode/json");
    aceInputEditor.session.setTabSize(4);
    aceInputEditor.session.setUseSoftTabs(true);
    aceInputEditor.session.setUseWorker(true);

    aceMappingEditor = ace.edit("ace-mapping");
    aceMappingEditor.setTheme("ace/theme/github");
    aceMappingEditor.session.setMode("ace/mode/coffee");
    aceMappingEditor.session.setTabSize(4);
    aceMappingEditor.session.setUseSoftTabs(true);
    aceMappingEditor.session.setUseWorker(false);

    new Choices(document.getElementById("sample-dropdown"), {
      searchEnabled: true,
      searchPlaceholderValue: 'Search examples',
      placeholderValue: 'Select an example',
      allowHTML: true
    });

    // Restore editor content from localStorage
    restoreFromLocalStorage();

    // Save content to localStorage on editor changes
    [aceInputEditor, aceMappingEditor].forEach(editor => {
        editor.on("change", saveToLocalStorage);
        editor.on("change", execute);
    });
});
</script>
