{{{page.contents}}}
<!-- Action buttons -->
<div class="button-bar">
  <button id="clear" class="button">Clear</button>
  <button id="prettify" class="button">Format input</button>
  <select id="sample-dropdown" class="button">
    {{#each (obj page.attributes.bloblang-samples) }}
    <option value="{{this.title}}">{{this.title}}</option>
    {{/each}}
  </select>
</div>
<div class="playground-container">
  <!-- Editors -->
  <section class="editors">

    <!-- Editor containers -->
    <div class="editor-container">
      <!-- Input editor -->
      <details open>
        <summary>Input (JSON)</summary>
        <div class="editor" id="ace-input" contenteditable="true">{ "message": "hello world" }</div>
      </details>

      <!-- Mapping editor -->
      <details open>
        <summary>Mapping</summary>
        <div class="editor" id="ace-mapping" contenteditable="true">root = this</div>
      </details>
    </div>
  </section>

  <!-- Output -->
  <section class="output-section">
    <div class="editor-container">
      <details open>
        <summary>Output</summary>
        <div class="editor" id="ace-output" contenteditable="true">"Output will appear here..."</div>
      </details>
      <details id="metadata-details">
      <summary>Metadata output</summary>
        <div class="editor" id="ace-metadata" contenteditable="true">"Metadata will appear here..."</div>
      </details>
    </div>
  </section>
</div>
<script>
let aceInputEditor, aceMappingEditor, aceOutputEditor,metadataDetails;

// Keys for localStorage
const localStorageKeys = {
  input: "blobl-editor-input",
  mapping: "blobl-editor-mapping",
};

// Default values for editors
const defaultInput = '{ "message": "hello world" }';
const defaultMapping = "root = this";
const defaultOutput = "Output will appear here...";
const defaultMeta = "Output metadata will appear here...";

document.addEventListener("DOMContentLoaded", () => {
  metadataDetails = document.getElementById("metadata-details");

  // Initialize input editor
  aceInputEditor = ace.edit("ace-input");
  aceInputEditor.setTheme("ace/theme/github");
  aceInputEditor.session.setMode("ace/mode/json");
  aceInputEditor.session.setTabSize(4);
  aceInputEditor.session.setUseSoftTabs(true);

  // Initialize mapping editor
  aceMappingEditor = ace.edit("ace-mapping");
  aceMappingEditor.setTheme("ace/theme/github");
  aceMappingEditor.session.setMode("ace/mode/coffee");
  aceMappingEditor.session.setOption("useWorker", false);
  aceMappingEditor.session.setTabSize(4);
  aceMappingEditor.session.setUseSoftTabs(true);

  // Initialize output editor
  aceOutputEditor = ace.edit("ace-output");
  aceOutputEditor.setTheme("ace/theme/github");
  aceOutputEditor.session.setMode("ace/mode/text"); // JSON syntax highlighting
  aceOutputEditor.setReadOnly(true); // Make output read-only
  aceOutputEditor.session.setTabSize(4);
  aceOutputEditor.session.setUseSoftTabs(true);

  // Initialize metadata editor
  aceMetadataEditor = ace.edit("ace-metadata");
  aceMetadataEditor.setTheme("ace/theme/github");
  aceMetadataEditor.session.setMode("ace/mode/json"); // Use JSON mode for metadata
  aceMetadataEditor.setReadOnly(true); // Make metadata read-only
  aceMetadataEditor.session.setTabSize(4);
  aceMetadataEditor.session.setUseSoftTabs(true);

  new Choices(document.getElementById("sample-dropdown"), {
    searchEnabled: true,
    searchPlaceholderValue: 'Search examples',
    placeholderValue: 'Select an example',
    allowHTML: true
  });

  const go = new Go();
  WebAssembly.instantiateStreaming(fetch("{{{siteRootPath}}}/blobl.wasm"), go.importObject)
    .then((result) => {
      go.run(result.instance);
      restoreFromLocalStorage();
      execute();
    })
    .catch(console.error);

  // Handle clear button
  document.getElementById("clear").addEventListener("click", () => {
    aceInputEditor.setValue("");
    aceMappingEditor.setValue("");
    aceOutputEditor.setValue(defaultOutput, 1);
    aceMetadataEditor.setValue(defaultMeta, 1);
    saveToLocalStorage();
  });

  // Handle prettify button
  document.getElementById("prettify").addEventListener("click", () => {
    try {
      const formatted = JSON.stringify(JSON.parse(aceInputEditor.getValue()), null, 2);
      aceInputEditor.setValue(formatted, 1);
      saveToLocalStorage();
    } catch (error) {
      aceOutputEditor.setValue("Error: Invalid JSON input", 1);
    }
  });

  const samples = {{{page.attributes.bloblang-samples}}};

  // Handle dropdown for examples
  document.getElementById("sample-dropdown").addEventListener("change", (event) => {
    const selectedSample = event.target.value;
    const sample = Object.values(samples).find((sample) => sample.title === selectedSample);

    if (sample) {
      aceInputEditor.setValue(sample.input, 1);
      aceMappingEditor.setValue(sample.mapping, 1);
      execute();
    }
  });

  // Save content to localStorage and execute on changes
  [aceInputEditor, aceMappingEditor].forEach((editor) => {
    editor.on("change", saveToLocalStorage);
    editor.on("change", execute);
  });
});

// Function to get input and mapping values
function getInput() {
  return aceInputEditor ? aceInputEditor.getValue() : "";
}

function getMapping() {
  return aceMappingEditor ? aceMappingEditor.getValue() : "";
}

function isValidJSON(str) {
  try {
    JSON.parse(str);
    return true;
  } catch (e) {
    return false;
  }
}

// Function to execute the mapping
function execute() {
  if (!metadataDetails) metadataDetails = document.getElementById("metadata-details");

  aceOutputEditor.setValue("");
  aceMetadataEditor.setValue("");

  try {
    const result = blobl(getMapping(), getInput());

    if (isValidJSON(result)) {
      const parsedResult = JSON.parse(result);

      // Separate message and metadata
      const message = parsedResult.msg || parsedResult;
      const metadata = parsedResult.meta || {};

      // Display message output
      aceOutputEditor.session.setMode("ace/mode/json");
      aceOutputEditor.setValue(JSON.stringify(message, null, 2), 1);

      // Display metadata
      if (Object.keys(metadata).length > 0) {
        aceMetadataEditor.session.setMode("ace/mode/json");
        aceMetadataEditor.setValue(JSON.stringify(metadata, null, 2), 1);
        metadataDetails.setAttribute("open", "true");
      } else {
        aceMetadataEditor.session.setMode("ace/mode/text");
        aceMetadataEditor.setValue("{}", 1);
        metadataDetails.removeAttribute("open");
      }
    } else {
      // If the result is not JSON, handle it as raw text
      aceOutputEditor.session.setMode("ace/mode/text");
      aceOutputEditor.setValue(result, 1);

      aceMetadataEditor.session.setMode("ace/mode/text");
      aceMetadataEditor.setValue("No metadata available", 1);
      metadataDetails.removeAttribute("open");
    }
  } catch (error) {
    // Handle general errors
    aceOutputEditor.session.setMode("ace/mode/text");
    aceOutputEditor.setValue("Error: " + error.message, 1);

    aceMetadataEditor.session.setMode("ace/mode/text");
    aceMetadataEditor.setValue("Error: " + error.message, 1);
    metadataDetails.removeAttribute("open");
  }
}

// Save editor content to localStorage
function saveToLocalStorage() {
  localStorage.setItem(localStorageKeys.input, aceInputEditor.getValue());
  localStorage.setItem(localStorageKeys.mapping, aceMappingEditor.getValue());
}

// Restore editor content from localStorage
function restoreFromLocalStorage() {
  const savedInput = localStorage.getItem(localStorageKeys.input);
  const savedMapping = localStorage.getItem(localStorageKeys.mapping);

  aceInputEditor.setValue(savedInput || defaultInput, 1);
  aceMappingEditor.setValue(savedMapping || defaultMapping, 1);
  aceOutputEditor.setValue(defaultOutput, 1);
  aceMetadataEditor.setValue(defaultMeta, 1);
}

</script>
