<!-- Action buttons -->
<div class="button-bar">
  <button id="clear" class="button">Clear</button>
  <button id="prettify" class="button">Format input</button>
  <select id="sample-dropdown" class="button">
    {{#each (obj page.attributes.bloblang-samples) }}
    <option value="{{this.title}}">{{this.title}}</option>
    {{/each}}
  </select>
</div>
<div class="playground-container">
  <!-- Editors -->
  <section class="editors">

    <!-- Editor containers -->
    <div class="editor-container">
      <!-- Input editor -->
      <details open>
        <summary>Input (JSON)</summary>
        <div class="editor" id="ace-input" contenteditable="true">{ "message": "hello world" }</div>
      </details>

      <!-- Mapping editor -->
      <details open>
        <summary>Mapping</summary>
        <div class="editor" id="ace-mapping" contenteditable="true">root = this</div>
      </details>
    </div>
  </section>

  <!-- Output -->
  <section class="output-section">
    <div class="editor-container">
        <P>Output</P>
        <div class="editor" id="ace-output">"Output will appear here..."</div>
      </div>
  </section>
</div>
<script>
let aceInputEditor, aceMappingEditor, aceOutputEditor;

// Keys for localStorage
const localStorageKeys = {
  input: "blobl-editor-input",
  mapping: "blobl-editor-mapping",
};

// Default values for editors
const defaultInput = '{ "message": "hello world" }';
const defaultMapping = "root = this";
const defaultOutput = "Output will appear here...";

// Function to get input and mapping values
function getInput() {
  return aceInputEditor ? aceInputEditor.getValue() : "";
}

function getMapping() {
  return aceMappingEditor ? aceMappingEditor.getValue() : "";
}

// Function to execute the mapping
function execute() {
  aceOutputEditor.setValue(""); // Clear output editor
  try {
    const result = blobl(getMapping(), getInput());
    try {
      const prettyResult = JSON.stringify(JSON.parse(result), null, 2);
      aceOutputEditor.session.setMode("ace/mode/json");
      aceOutputEditor.setValue(prettyResult, 1); // Display formatted JSON
    } catch (error) {
      aceOutputEditor.session.setMode("ace/mode/text");
      aceOutputEditor.setValue(result, 1); // Display raw result if not JSON
    }
  } catch (error) {
    aceOutputEditor.session.setMode("ace/mode/text");
    aceOutputEditor.setValue("Error: " + error.message, 1); // Display error message
  }
}

// Save editor content to localStorage
function saveToLocalStorage() {
  localStorage.setItem(localStorageKeys.input, aceInputEditor.getValue());
  localStorage.setItem(localStorageKeys.mapping, aceMappingEditor.getValue());
}

// Restore editor content from localStorage
function restoreFromLocalStorage() {
  const savedInput = localStorage.getItem(localStorageKeys.input);
  const savedMapping = localStorage.getItem(localStorageKeys.mapping);

  aceInputEditor.setValue(savedInput || defaultInput, 1);
  aceMappingEditor.setValue(savedMapping || defaultMapping, 1);
  aceOutputEditor.setValue(defaultOutput, 1);
}

document.addEventListener("DOMContentLoaded", () => {
  // Initialize input editor
  aceInputEditor = ace.edit("ace-input");
  aceInputEditor.setTheme("ace/theme/github");
  aceInputEditor.session.setMode("ace/mode/json");
  aceInputEditor.session.setTabSize(4);
  aceInputEditor.session.setUseSoftTabs(true);

  // Initialize mapping editor
  aceMappingEditor = ace.edit("ace-mapping");
  aceMappingEditor.setTheme("ace/theme/github");
  aceMappingEditor.session.setMode("ace/mode/coffee");
  aceMappingEditor.session.setTabSize(4);
  aceMappingEditor.session.setUseSoftTabs(true);

  // Initialize output editor
  aceOutputEditor = ace.edit("ace-output");
  aceOutputEditor.setTheme("ace/theme/github");
  aceOutputEditor.session.setMode("ace/mode/json"); // JSON syntax highlighting
  aceOutputEditor.setReadOnly(true); // Make output read-only
  aceOutputEditor.session.setTabSize(4);
  aceOutputEditor.session.setUseSoftTabs(true);

  new Choices(document.getElementById("sample-dropdown"), {
      searchEnabled: true,
      searchPlaceholderValue: 'Search examples',
      placeholderValue: 'Select an example',
      allowHTML: true
    });

  // Restore editor content from localStorage
  restoreFromLocalStorage();

  // Save content to localStorage and execute on changes
  [aceInputEditor, aceMappingEditor].forEach((editor) => {
    editor.on("change", saveToLocalStorage);
    editor.on("change", execute);
  });
});

const samples = {{{page.attributes.bloblang-samples}}};

// Handle dropdown for examples
document.getElementById("sample-dropdown").addEventListener("change", (event) => {
  const selectedSample = event.target.value;
  const sample = Object.values(samples).find((sample) => sample.title === selectedSample);

  if (sample) {
    aceInputEditor.setValue(sample.input, 1);
    aceMappingEditor.setValue(sample.mapping, 1);
    execute();
  }
});

// Handle clear button
document.getElementById("clear").addEventListener("click", () => {
  aceInputEditor.setValue("");
  aceMappingEditor.setValue("");
  aceOutputEditor.setValue(defaultOutput, 1);
  saveToLocalStorage();
});

// Handle prettify button
document.getElementById("prettify").addEventListener("click", () => {
  try {
    const formatted = JSON.stringify(JSON.parse(aceInputEditor.getValue()), null, 2);
    aceInputEditor.setValue(formatted, 1);
    saveToLocalStorage();
  } catch (error) {
    aceOutputEditor.setValue("Error: Invalid JSON input", 1);
  }
});

const go = new Go();
WebAssembly.instantiateStreaming(fetch("{{{siteRootPath}}}/blobl.wasm"), go.importObject)
  .then((result) => {
    go.run(result.instance);
    restoreFromLocalStorage();
    execute();
  })
  .catch(console.error);

</script>
