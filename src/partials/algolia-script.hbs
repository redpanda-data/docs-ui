<script>

const INITIAL_TAG = `
{{#if (eq page.component.name 'api')}}
{{{site.components.ROOT.title}}} v{{{site.components.ROOT.latest.version}}}
{{else if (and (is-prerelease page) page.displayVersion)}}
{{{page.component.title}}} v{{{page.displayVersion}}}
{{else if page.componentVersion.version}}
{{{page.component.title}}} v{{{page.componentVersion.version}}}
{{else}}
{{{page.component.title}}}
{{/if}}`.trim()

const PRERELEASE = `
{{#if (and (is-prerelease page) page.displayVersion)}}
true
{{else}}
false
{{/if}}`.trim()

const INITIAL_TAGS=['labs','Redpanda Connect', 'Redpanda v{{{site.components.ROOT.latest.version}}}']

const VERSION = `
{{#if (or (eq page.component.title home) (eq page.component.layout 404) (eq page.component.name 'redpanda-labs'))}}
{{{site.components.ROOT.latest.version}}}
{{else}}
{{{page.componentVersion.version}}}
{{/if}}`.trim()

const getVersionDigit = (tag) => {
    const versionRegex = /v(\d+)/;
    const match = tag.match(versionRegex);
    return match ? match[1] : null;
};

// Get the product name in versioned tags
// For example Redpanda v24.2
const getProductName = (tag) => {
    const wordBeforeVRegex = /(\S+) v/;
    const match = tag.match(wordBeforeVRegex);
    return match ? match[1] : null;
};

// Apply all filter tags except when there's a matching initial tag with a different version
const applyFilterTags = (initialTags, initialTag) => {
    const initialVersionDigit = getVersionDigit(initialTag);
    const initialWordBeforeV = getProductName(initialTag);
    const filteredTags = initialTags.map(tag => {
        const tagVersionDigit = getVersionDigit(tag);
        const tagWordBeforeV = getProductName(tag);
        if (
            initialVersionDigit &&
            tagVersionDigit &&
            initialVersionDigit !== tagVersionDigit &&
            initialWordBeforeV === tagWordBeforeV
        ) {
            return initialTag;
        }
        return tag;
    });
    return filteredTags.map(tag => ({ label: tag, facet: '_tags' }));
};


// Applies filters to search results
// https://www.algolia.com/doc-beta/ui-libraries/autocomplete/guides/filtering-results#applying-filters-from-tags
function mapToAlgoliaFilters(tagsByFacet) {
  let filters = [[]];
  Object.keys(tagsByFacet).forEach(facet => {
    tagsByFacet[facet].forEach(tag => {
      const filterString = tag.label;
      const isFilterInArray = filters[0].includes(filterString);
      if (!isFilterInArray) {
        filters[0].push(filterString);
      } else {
        filters[0] = filters[0].filter(item => item !== filterString);
      }
    });
  });
  return filters;
}
function groupBy(items, predicate) {
  return items.reduce((acc, item) => {
    const key = predicate(item);
    if (!acc.hasOwnProperty(key)) {
      acc[key] = [];
    }
    acc[key].push(item);
    return acc;
  }, {});
}

window.addEventListener('DOMContentLoaded', function() {
  const { createTagsPlugin } = window['@algolia/autocomplete-plugin-tags'];

  const { autocomplete, getAlgoliaResults, getAlgoliaFacets } = window['@algolia/autocomplete-js'];

  const searchClient = algoliasearch(
    '{{{env.ALGOLIA_APP_ID}}}',
    '{{{env.ALGOLIA_API_KEY}}}'
  );

  const { createLocalStorageRecentSearchesPlugin } = window[
    '@algolia/autocomplete-plugin-recent-searches'
  ];

  const recentSearchesPlugin = createLocalStorageRecentSearchesPlugin({
    key: 'RECENT_SEARCH',
    limit: 5,
  });

  const tagsPlugin = createTagsPlugin({
    // Adds tags on click
    // See https://www.algolia.com/doc-beta/ui-libraries/autocomplete/guides/filtering-results#adding-tags
    getTagsSubscribers() {
      return [
        {
          sourceId: 'filters',
          getTag({ item }) {
            return item;
          },
        },
      ];
    },
    initialTags: applyFilterTags(INITIAL_TAGS, INITIAL_TAG),
  });

  autocomplete({
    container: '#autocomplete',
    placeholder: 'Search',
    detachedMediaQuery: '',
    plugins: [recentSearchesPlugin, tagsPlugin],
    insights: true,
    defaultActiveItemId: 0,
    onStateChange({ state }) {
    },
    render({ children, state, render, html, components, createElement }, root) {
      const { preview } = state.context;
      if (state.context.preview && !state.context.preview.insightsInitialized) {
        aa('init',{
          appId: '{{{env.ALGOLIA_APP_ID}}}',
          apiKey: '{{{env.ALGOLIA_API_KEY}}}',
        });
        state.context.preview.insightsInitialized = true
      }
      render(
        html`<div class="aa-Grid">
        <div class="aa-Results aa-Column">${children}</div>
        ${preview
          ? html`<div class="aa-Preview aa-Column doc">
            <div class="aa-PanelLayout aa-Panel--scrollable">
              ${
                preview.breadcrumbs
                ? html`<div class="breadcrumbs">
                <ul>
                ${preview.breadcrumbs.map(breadcrumb =>
                  html`<li><a onclick="${(event) => {
                    event.stopPropagation();
                    aa('clickedObjectIDsAfterSearch',{
                      eventName: 'Preview Selected',
                      index: state.context.preview.__autocomplete_indexName,
                      queryID: state.context.preview.__autocomplete_queryID,
                      objectIDs: [state.context.preview.objectID],
                      positions: [state.activeItemId + 1] // positions start from 1 but itemIds start from 0
                    })
                  }}" href="${breadcrumb.u}">${breadcrumb.t}</a></li>`
                )}
                </ul>
              </div>`
              : ''
              }
              <h3>
                ${components.Highlight({
                  hit: preview,
                  attribute: 'title',
                })}
              </h3>
              <p>
                ${components.Highlight({
                  hit: preview,
                  attribute: 'intro',
                })}
              </p>
              ${
                preview.image
                ? html`<div class="aa-ItemIcon">
                      ${preview.type == 'Doc' ?
                        html`<a
                          onclick="${(event) => {
                          event.stopPropagation();
                          aa('clickedObjectIDsAfterSearch',{
                            eventName: 'Preview Selected',
                            index: state.context.preview.__autocomplete_indexName,
                            queryID: state.context.preview.__autocomplete_queryID,
                            objectIDs: [state.context.preview.objectID],
                            positions: [state.activeItemId + 1] // positions start from 1 but itemIds start from 0
                          })
                        }}" href="${preview.objectID}"><img
                            src="${preview.image}"
                          /></a>` :
                        html`<a
                          onclick="${(event) => {
                          event.stopPropagation();
                          aa('clickedObjectIDsAfterSearch',{
                            eventName: 'Preview Selected',
                            index: state.context.preview.__autocomplete_indexName,
                            queryID: state.context.preview.__autocomplete_queryID,
                            objectIDs: [state.context.preview.objectID],
                            positions: [state.activeItemId + 1] // positions start from 1 but itemIds start from 0
                          })
                        }}" target="_blank" href="${preview.objectID}"><img
                            src="${preview.image}"/>
                        </a>`
                      }
                      </div>`
                : ''
              }
              <div class="toc sidebar">
                <div class="toc-menu">
                  ${preview.titles && preview.titles.length > 0 ?
                  html`<h4>On this page</h4>`
                  : ''}
                  <ul>
                  ${preview.titles && preview.titles.length > 0 && preview.titles.map(title =>
                    html`<li>
                      ${state.context.preview.type == 'Doc' ?
                        html`<a onclick="${(event) => {
                          event.stopPropagation();
                          aa('clickedObjectIDsAfterSearch',{
                            eventName: 'Preview Selected',
                            index: state.context.preview.__autocomplete_indexName,
                            queryID: state.context.preview.__autocomplete_queryID,
                            objectIDs: [state.context.preview.objectID],
                            positions: [state.activeItemId + 1] // positions start from 1 but itemIds start from 0
                          })
                        }}" href="${preview.objectID}#${title.h}">${components.Highlight({
                              hit: title,
                              attribute: 't',
                          })}</a>` :
                        html`<a onclick="${(event) => {
                          event.stopPropagation();
                          aa('clickedObjectIDsAfterSearch',{
                            eventName: 'Preview Selected',
                            index: state.context.preview.__autocomplete_indexName,
                            queryID: state.context.preview.__autocomplete_queryID,
                            objectIDs: [state.context.preview.objectID],
                            positions: [state.activeItemId + 1] // positions start from 1 but itemIds start from 0
                          })
                        }}" target="_blank" href="${preview.objectID}#${title.h}">${components.Highlight({
                              hit: title,
                              attribute: 't',
                          })}</a>`
                        }
                    </li>`
                  )}
                  </ul>
                </div>
              </div>
            </div>
          </div>
          <footer class="search-footer"><ul class="search-commands"><li><kbd class="algolia-command"><svg width="15" height="15" aria-label="Enter key" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M12 3.53088v3c0 1-1 2-2 2H4M7 11.53088l-3-3 3-3"></path></g></svg></kbd><span class="algolia-label">to select</span></li><li><kbd class="algolia-command"><svg width="15" height="15" aria-label="Arrow down" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M7.5 3.5v8M10.5 8.5l-3 3-3-3"></path></g></svg></kbd><kbd class="algolia-command"><svg width="15" height="15" aria-label="Arrow up" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M7.5 11.5v-8M10.5 6.5l-3-3-3 3"></path></g></svg></kbd><span class="algolia-label">to navigate</span></li><li><kbd class="algolia-command"><svg width="15" height="15" aria-label="Escape key" role="img"><g fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="1.2"><path d="M13.6167 8.936c-.1065.3583-.6883.962-1.4875.962-.7993 0-1.653-.9165-1.653-2.1258v-.5678c0-1.2548.7896-2.1016 1.653-2.1016.8634 0 1.3601.4778 1.4875 1.0724M9 6c-.1352-.4735-.7506-.9219-1.46-.8972-.7092.0246-1.344.57-1.344 1.2166s.4198.8812 1.3445.9805C8.465 7.3992 8.968 7.9337 9 8.5c.032.5663-.454 1.398-1.4595 1.398C6.6593 9.898 6 9 5.963 8.4851m-1.4748.5368c-.2635.5941-.8099.876-1.5443.876s-1.7073-.6248-1.7073-2.204v-.4603c0-1.0416.721-2.131 1.7073-2.131.9864 0 1.6425 1.031 1.5443 2.2492h-2.956"></path></g></svg></kbd><span class="algolia-label">to close</span></li></ul></footer>`
          : ''
          }
        </div>`,
        root
      );
    },
    getSources({ query, state }) {
      const tagsByFacet = groupBy(
        state.context.tagsPlugin.tags,
        (tag) => tag.facet
      );
      return [
        {
          sourceId: 'filters',
          getItems({ query }) {
            return getAlgoliaFacets({
              searchClient,
              queries: [
              {
                indexName: '{{{env.ALGOLIA_INDEX_NAME}}}',
                facet: '_tags',
                params: {
                  facetQuery: '',
                },
              },
            ],
            // Removes filters from the list after they've been applied
            // to prevent confusion where a filter is applied but can still be clicked
            transformResponse({ facetHits }) {
              const existingTags = (tagsByFacet["_tags"] || []).map(tag => tag.label);

              return facetHits[0]
                .filter(hit =>
                  !existingTags.includes(hit.label)
                )
                .map(hit => ({ ...hit, facet: '_tags' }));
            },
          });
          },
          templates: {
            item({ item, components, html }) {
              return html`<div class="aa-ItemWrapper">
                <div class="aa-ItemContent">
                  <div class="aa-ItemContentBody">
                    <div class="aa-ItemContentTitle" title="Add filter">
                      ${components.Highlight({ hit: item, attribute: 'label' })}
                    </div>
                  </div>
                </div>
              </div>`;
            },
            header({items, html}) {
              if (!items.length) {
                return;
              }
              let headerTitle = "Add filters";
              return html`
              <span class="aa-SourceHeaderTitle">${headerTitle}</span>
              <div class="aa-SourceHeaderLine"></div>`;
            },
          },
        },
        {
          sourceId: 'docs',
          getItems() {
            return getAlgoliaResults({
              searchClient,
              queries: [
                {
                  indexName: '{{{env.ALGOLIA_INDEX_NAME}}}',
                  query,
                  params: {
                    clickAnalytics: true,
                    hitsPerPage: 10,
                    attributesToSnippet: ['*:25'],
                    snippetEllipsisText: '…',
                    tagFilters: mapToAlgoliaFilters(tagsByFacet),
                  },
                },
              ],
              transformResponse({ hits }) {
                return hits.map(nestedHits => {
                  const docIndices = new Map();
                  nestedHits.forEach((item, index) => {
                    if (item.type === 'Doc') {
                      docIndices.set(index, item);
                    }
                  });
                  const nonDocItems = nestedHits.filter(item => item.type !== 'Doc' && typeof item.unixTimestamp === 'number')
                    .sort((a, b) => b.unixTimestamp - a.unixTimestamp);
                  let nonDocIndex = 0;

                  docIndices.forEach((item, index) => {
                    if (item._highlightResult && item._highlightResult.titles) {
                      const matchedIndex = item._highlightResult.titles.findIndex(title => title.t.matchLevel === "full");
                      if (matchedIndex !== -1) {
                        const matchedTopLevelTitle = item.titles[matchedIndex];
                        if (matchedTopLevelTitle) {
                          item.matchingHeading = `#${matchedTopLevelTitle.h}`;
                        }
                      }
                    }
                    nestedHits[index] = item;
                  });

                  return nestedHits.map((item, index) => {
                    return docIndices.has(index) ? docIndices.get(index) : nonDocItems[nonDocIndex++];
                  });
                });
              },
            })
          },
          templates: {
            noResults({state, html}) {
              state.context.preview = null
              if (!state.query) return
              return html`
              <div>No results for ${state.query}</div><p>Believe this query should return results?<a target="_blank" href="https://github.com/redpanda-data/documentation/issues/new?title=No%20search%20results%20for%20${state.query}"> Let us know</a>.</p>`;
            },
            header({items, html}) {
              if (!items.length) {
                return;
              }

              return html`
              <span class="aa-SourceHeaderTitle">Results</span>
              <div class="aa-SourceHeaderLine"></div>`;
            },
            footer({state, html}) {
              if (state.context.preview) {
                // Extract tags and format them for URL encoding as array parameters
                const tag = state.context.tagsPlugin.tags[0];
                let label = 'docs'; // Default to 'docs'

                // Check if a tag is selected and its first character is not uppercase
                if (tag && tag.label.charAt(0) !== tag.label.charAt(0).toUpperCase()) {
                  label = tag.label; // Use the tag label if it doesn't start with an uppercase character
                }

                // Capitalize the first character of the label
                label = label.charAt(0).toUpperCase() + label.slice(1);

                // Convert label to singular if it ends with 's'
                const formattedLabel = label.endsWith('s') ? label.slice(0, -1) : label;

                // Encode as array parameter
                const type = `type[0]=${encodeURIComponent(formattedLabel)}`;
                const queryParam = state.query ? `&q=${encodeURIComponent(state.query)}` : '';
                var queryParams = `${type}${queryParam}`;
                if (formattedLabel === 'Doc' && VERSION) {
                   queryParams += `&version=${VERSION}`
                }
                return html`<div class="aa-Footer">
                <a class="aa-ItemLink" href="{{{relativize '/search' }}}?${queryParams}">View all results</a>
                </div>`;
              }
            },
            item({ item, components, html }) {
              const matchingHeading = item.matchingHeading || ''
              const aTag = item.type == 'Doc' ? html`<a class="aa-ItemLink" href="${item.objectID}${matchingHeading}">
                <div class="aa-ItemContent">
                  <div class="aa-ItemContentBody">
                    <div class="aa-ItemContentRow">
                      <div class="aa-ItemContentTitle">
                        ${components.Highlight({
                          hit: item,
                          attribute: 'title',
                        })}
                      </div>
                    </div>
                    ${ item.breadcrumbs
                      ? html`<div class="aa-ItemContentRow">
                      <div class="aa-Breadcrumbs">
                        <ul>
                        ${item.breadcrumbs.length > 2 && item.breadcrumbs.slice(1, item.breadcrumbs.length - 1).map(breadcrumb =>
                        html`<li>${breadcrumb.t}</li>`
                        )}
                        ${item.breadcrumbs.length === 2 && item.breadcrumbs.slice(1).map(breadcrumb =>
                        html`<li>${breadcrumb.t}</li>`
                        )}
                        </ul>
                      </div>
                    </div>`
                    : ''
                    }
                    ${ item.text
                    ? html`<div class="aa-ItemContentSnippet">
                      ${components.Snippet({
                        hit: item,
                        attribute: 'text',
                      })}
                    </div>`
                    : html`<div class="aa-ItemContentSnippet">
                      ${components.Snippet({
                        hit: item,
                        attribute: 'intro',
                      })}
                    </div>`
                    }
                    <div class="aa-ItemContentRow">
                      <div class="aa-ItemContentTitle result-type">
                        ${item.type}
                      </div>
                      ${item.version ? html`
                      <div class="aa-ItemContentTitle result-type">
                        ${item.version}
                      </div>` : ''
                      }
                    </div>
                  </div>
                  <div class="aa-ItemActions">
                    <button
                      class="aa-ItemActionButton aa-DesktopOnly aa-ActiveOnly"
                      type="button"
                      title="Open page"
                    >
                      <svg
                        viewBox="0 0 24 24"
                        width="20"
                        height="20"
                        fill="currentColor"
                      >
                        <path
                          d="M18.984 6.984h2.016v6h-15.188l3.609 3.609-1.406 1.406-6-6 6-6 1.406 1.406-3.609 3.609h13.172v-4.031z"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
              </a>` : html`<a target="_blank" class="aa-ItemLink" href="${item.objectID}">
                <div class="aa-ItemContent">
                  <div class="aa-ItemContentBody">
                    <div class="aa-ItemContentRow">
                      <div class="aa-ItemContentTitle">
                        ${components.Highlight({
                          hit: item,
                          attribute: 'title',
                        })}
                      </div>
                    </div>
                    ${ item.breadcrumbs
                      ? html`<div class="aa-ItemContentRow">
                      <div class="aa-Breadcrumbs">
                        <ul>
                        ${item.breadcrumbs.length > 2 && item.breadcrumbs.slice(1, item.breadcrumbs.length - 1).map(breadcrumb =>
                        html`<li>${breadcrumb.t}</li>`
                        )}
                        ${item.breadcrumbs.length === 2 && item.breadcrumbs.slice(1).map(breadcrumb =>
                        html`<li>${breadcrumb.t}</li>`
                        )}
                        </ul>
                      </div>
                    </div>`
                    : ''
                  }
                    <div class="aa-ItemContentSnippet">
                      ${components.Snippet({
                        hit: item,
                        attribute: 'text',
                      })}
                    </div>
                    <div class="aa-ItemContentRow">
                      <div class="aa-ItemContentTitle result-type">
                        ${item.type}
                      </div>
                      ${item.version ? html`
                      <div class="aa-ItemContentTitle result-type">
                        ${item.version}
                      </div>` : ''
                      }
                    </div>
                  </div>
                  <div class="aa-ItemActions">
                    <button
                      class="aa-ItemActionButton aa-DesktopOnly aa-ActiveOnly"
                      type="button"
                      title="Open page"
                    >
                      <svg
                        viewBox="0 0 24 24"
                        width="20"
                        height="20"
                        fill="currentColor"
                      >
                        <path
                          d="M18.984 6.984h2.016v6h-15.188l3.609 3.609-1.406 1.406-6-6 6-6 1.406 1.406-3.609 3.609h13.172v-4.031z"
                        />
                      </svg>
                    </button>
                  </div>
                </div>
              </a>`
              return html`${aTag}`;
            },
          },
          getItemUrl({ item }) {
            return item.objectID;
          },
          onActive({ item, setContext }) {
            setContext({ preview: item });
          },
        }
      ];
    },
  });
})
</script>
