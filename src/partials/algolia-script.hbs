<script>
/**
 * List of result types we allow to open inside the in-panel preview.
 * Keeping this explicit prevents surprising navigation for types we don't
 * fully support.
 */
const SUPPORTED_PREVIEW_TYPES = ['doc', 'api', 'api endpoint', 'api group'];

/**
 * ---- Build-time context (Handlebars) ----
 * These strings are resolved at build time. They power “contextual filters”
 * so initial search state reflects the page the user is on.
 */
const INITIAL_TAG = `
{{#if (eq page.component.name 'api')}}
{{{site.components.ROOT.title}}} v{{{site.components.ROOT.latest.version}}}
{{else if (and (is-prerelease page) page.displayVersion)}}
{{{page.component.title}}} v{{{page.displayVersion}}}
{{else if page.componentVersion.version}}
{{{page.component.title}}} v{{{page.componentVersion.version}}}
{{else}}
{{{page.component.title}}}
{{/if}}`.trim();

const LATEST_ENTERPRISE = `{{{site.components.ROOT.title}}} v{{{site.components.ROOT.latest.version}}}`.trim();

const PRERELEASE = `
{{#if (and (is-prerelease page) page.displayVersion)}}
true
{{else}}
false
{{/if}}`.trim();

/**
 * NOTE: We key off component *title* here (not "name"); this mirrors the site’s
 * taxonomy. If you ever change the source,
 * update the “Cloud” check accordingly.
 */
const COMPONENT_NAME = `{{{page.component.title}}}`.trim();

/**
 * The “catalog” of product/API tags we want available by default.
 * For Cloud, we intentionally exclude "Admin API" from defaults.
 */
const INITIAL_TAGS =
  COMPONENT_NAME === 'Cloud'
    ? ['Labs', 'Schema Registry API', 'HTTP Proxy API', 'Cloud Control Plane API', 'Cloud Data Plane API']
    : COMPONENT_NAME === 'Self-Managed'
    ? ['Labs', 'Connect', 'Admin API', 'Schema Registry API', 'HTTP Proxy API']
    : ['Labs', 'Connect', 'Admin API', 'Schema Registry API', 'HTTP Proxy API', 'Cloud Control Plane API', 'Cloud Data Plane API'];

/** Version added to the “View all” link to scope whole-site search. */
const VERSION = PRERELEASE === 'true'
  ? `{{{page.displayVersion}}}`.trim()
  : `{{{page.componentVersion.version}}}`.trim();

/**
 * Merge a contextual tag (from the current page) with our initial tags, dedupe,
 * and shape them to the Tags plugin’s expected structure: { label, facet }.
 * Tags plugin: https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/plugins/tags-plugin/
 */
const applyFilterTags = (initialTags, initialTag) => {
  if (!initialTag) return initialTags.map((tag) => ({ label: tag, facet: '_tags' }));
  let mergedTags;
  // Home/Labs broaden context so first query is helpful for new users.
  if (initialTag === 'Home' || initialTag === 'Labs') {
    mergedTags = [...initialTags, 'Cloud', LATEST_ENTERPRISE];
  } else {
    mergedTags = [...initialTags, initialTag];
  }
  mergedTags = [...new Set(mergedTags)];
  return mergedTags.map((tag) => ({ label: tag, facet: '_tags' }));
};

/**
 * Convert selected tag facets into Algolia `tagFilters`.
 * `tagFilters` ORs within an array; multiple arrays would AND.
 * Docs: https://www.algolia.com/doc/api-reference/api-parameters/tagFilters/
 */
function mapToAlgoliaFilters(tagsByFacet) {
  const labels = (tagsByFacet._tags || []).map(t => t.label);
  return labels.length ? [labels] : undefined;
}

/** Small utilities */
function groupBy(items, predicate) {
  return items.reduce((acc, item) => {
    const key = predicate(item);
    if (!Object.prototype.hasOwnProperty.call(acc, key)) {
      acc[key] = [];
    }
    acc[key].push(item);
    return acc;
  }, {});
}

/** Normalize to compare labels case/space-insensitively. */
const normalizeLabel = (s) => (s || '').trim().replace(/\s+/g, ' ').toLowerCase();

/**
 * Global toggle used by checkbox UI in our custom facet dropdown.
 * We expose this on `window` so event handlers defined in template strings
 * (which may be re-created on each render) always call a stable function.
 * See the “Why we attach to window” section below.
 */
let __algoliaTagsPlugin = null;
window.__algoliaToggleFilter = function(label, checked) {
  if (!label || !__algoliaTagsPlugin) return;
  const prev = __algoliaTagsPlugin.data.tags || [];
  const isSame = (t) => normalizeLabel(t.label) === normalizeLabel(label);
  const exists = prev.some(isSame);
  if (checked && !exists) {
    __algoliaTagsPlugin.data.setTags([...prev, { label, facet: '_tags' }]);
  } else if (!checked && exists) {
    __algoliaTagsPlugin.data.setTags(prev.filter(t => !isSame(t)));
  }
};

/** Stable refs + listeners for outside-click / Esc handling on the dropdown. */
const __dropdownRefs = { menu: null, toggle: null };
let __dropdownOutsideHandler = null;
let __dropdownKeydownHandler = null;

window.addEventListener('DOMContentLoaded', function () {
  /**
   * We load Algolia Autocomplete UMD bundles via <script>, so they live on `window`.
   * - Autocomplete core: https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete/
   * - getAlgoliaResults / getAlgoliaFacets:
   *   https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/sources/#param-getalgoliaresults
   *   https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/sources/#param-getalgoliafacets
   * - Recent searches plugin:
   *   https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/plugins/recent-searches-plugin/
   * - Tags plugin:
   *   https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/plugins/tags-plugin/
   */
  const { createTagsPlugin } = window['@algolia/autocomplete-plugin-tags'];
  const { autocomplete, getAlgoliaResults, getAlgoliaFacets } = window['@algolia/autocomplete-js'];
  const { createLocalStorageRecentSearchesPlugin } = window['@algolia/autocomplete-plugin-recent-searches'];

  /**
   * ---- Search Insights (analytics) ----
   * Algolia recommends a global queue `aa` while the script loads,
   * then `aa('init', {...})` to connect events. This ensures click/conversion
   * events are attributed to queries via queryID.
   * Insights JS: https://www.algolia.com/doc/api-client/insights/js/
   * Autocomplete + Insights: https://www.algolia.com/doc/ui-libraries/autocomplete/guides/insights/
   */
  window.aa = window.aa || function(){ (window.aa.q = window.aa.q || []).push(arguments); };
  if (!window.__aaLoaderInserted) {
    const si = document.createElement('script');
    si.async = 1;
    si.src = 'https://cdn.jsdelivr.net/npm/search-insights@2';
    document.head.appendChild(si);
    window.__aaLoaderInserted = true; // guard against double-insert
  }
  aa('init', {
    appId: '{{{env.ALGOLIA_APP_ID}}}',
    apiKey: '{{{env.ALGOLIA_API_KEY}}}',
    useCookie: true, // helps stitch sessions for analytics
  });

  /**
   * Algolia JS client instance used by Autocomplete helpers.
   * Client install/start: https://www.algolia.com/doc/api-client/getting-started/install/javascript/
   */
  const searchClient = algoliasearch(
    '{{{env.ALGOLIA_APP_ID}}}',
    '{{{env.ALGOLIA_API_KEY}}}'
  );

  /** Keep 5 recent searches in localStorage for quick recall. */
  const recentSearchesPlugin = createLocalStorageRecentSearchesPlugin({
    key: 'RECENT_SEARCH',
    limit: 5,
  });

  /**
   * Tags plugin manages selected tags inside Autocomplete state/context.
   * We subscribe this plugin to the “filters” source so clicking a facet item
   * turns directly into a tag.
   */
  const tagsPlugin = createTagsPlugin({
    getTagsSubscribers() {
      return [
        {
          sourceId: 'filters',
          getTag({ item }) {
            return item; // item has shape { label, facet }
          },
        },
      ];
    },
    initialTags: applyFilterTags(INITIAL_TAGS, INITIAL_TAG),
  });
  __algoliaTagsPlugin = tagsPlugin; // used by our window.__algoliaToggleFilter

  /**
   * ---- Autocomplete instance ----
   * - detachedMediaQuery: '' -> detached mode opens a modal
   *   https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete/#param-detachedmediaquery
   * - insights: true -> Autocomplete sends events to `aa`
   *   https://www.algolia.com/doc/ui-libraries/autocomplete/guides/insights/#enabling-insights
   * - defaultActiveItemId: 0 -> keyboard UX selects first result by default
   */
  const autocompleteInstance = autocomplete({
    container: '#autocomplete',
    placeholder: 'Search',
    detachedMediaQuery: '',
    plugins: [recentSearchesPlugin, tagsPlugin],
    insights: true,
    defaultActiveItemId: 0,

    /**
     * Keep derived UI (preview, dropdown listeners, facet cache) in sync with
     * Autocomplete state in a single place.
     * onStateChange docs:
     * https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/autocomplete/#param-onstatechange
     */
    onStateChange({ state, prevState, setContext }) {
      const prevQ = prevState?.query ?? '';
      const nextQ = state.query ?? '';

      // 1) Detect tag changes (order-insensitive) so we update preview accordingly.
      const tagKey = (s) => (s?.context?.tagsPlugin?.tags || [])
        .map((t) => `${t.facet}:${t.label}`)
        .sort()
        .join('|');
      const prevTagKey = tagKey(prevState);
      const nextTagKey = tagKey(state);
      const tagsChanged = prevTagKey !== nextTagKey;

      // 2) First result of the "docs" source drives the preview pane.
      const docsCollection = state.collections.find((c) => c.source.sourceId === 'docs');
      const firstHit = docsCollection?.items?.[0] || null;

      // 3) Persist the facet list in context to avoid flicker during async refresh.
      //    Context docs: https://www.algolia.com/doc/ui-libraries/autocomplete/core-concepts/context/
      const prevFilters = prevState?.context?.filtersSourceItems || [];
      const filtersSource = state.collections.find(c => c.source.sourceId === 'filters');
      const currFilters = (filtersSource && Array.isArray(filtersSource.items))
        ? filtersSource.items
        : prevFilters;

      const same = prevFilters.length === currFilters.length &&
                   prevFilters.every((p, i) => p?.label === currFilters[i]?.label);

      if (!same || tagsChanged) {
        setContext({ ...state.context, filtersSourceItems: currFilters });
      }

      // 4) Attach/detach global listeners only while the dropdown is open.
      const wasOpen = !!(prevState?.context?.dropdownOpen);
      const isOpen  = !!(state?.context?.dropdownOpen);
      if (isOpen && !wasOpen) {
        const close = () => setContext({ ...state.context, dropdownOpen: false });
        __dropdownOutsideHandler = (e) => {
          const menu = __dropdownRefs.menu;
          const toggle = __dropdownRefs.toggle;
          if (!menu) return;
          if (menu.contains(e.target) || (toggle && toggle.contains(e.target))) return;
          close();
        };
        __dropdownKeydownHandler = (e) => {
          if (e.key === 'Escape') close();
        };
        document.addEventListener('pointerdown', __dropdownOutsideHandler, true);
        document.addEventListener('keydown', __dropdownKeydownHandler);
      } else if (!isOpen && wasOpen) {
        if (__dropdownOutsideHandler) {
          document.removeEventListener('pointerdown', __dropdownOutsideHandler, true);
          __dropdownOutsideHandler = null;
        }
        if (__dropdownKeydownHandler) {
          document.removeEventListener('keydown', __dropdownKeydownHandler);
          __dropdownKeydownHandler = null;
        }
      }

      // 5) Update or seed preview when query/tags change or first load.
      if ((nextQ && nextQ !== prevQ) || tagsChanged) {
        setContext({ ...state.context, preview: firstHit });
        return;
      }
      if (!state.context.preview && firstHit) {
        setContext({ ...state.context, preview: firstHit });
      }
    },

    /**
     * Custom render for header (filters & AI), results, preview, and footer.
     * Templates/helpers:
     * https://www.algolia.com/doc/ui-libraries/autocomplete/core-concepts/templates/
     */
    render({ children, state, render, html, components }, root) {
      const { preview } = state.context;
      const currentQuery = state.query;

      /** ---- Facet dropdown model ----
       * We union three sources to produce a stable checkbox list:
       *  - server facets (fresh from index),
       *  - our known catalog (INITIAL_TAGS),
       *  - user-selected tags (to keep checked state if server facet drops).
       */
      const serverFacetItems = (state.context.filtersSourceItems || []);
      const selectedTagObjs = (state.context?.tagsPlugin?.tags || []).filter(t => t.facet === '_tags');
      const selectedSet = new Set(selectedTagObjs.map(t => normalizeLabel(t.label)));

      const serverLabels = serverFacetItems.map(i => i.label);
      const knownLabels  = applyFilterTags(INITIAL_TAGS, INITIAL_TAG).map(t => t.label);
      const selectedLabels = selectedTagObjs.map(t => t.label);

      const unionMap = new Map();
      [...serverLabels, ...knownLabels, ...selectedLabels].forEach(l => {
        const norm = normalizeLabel(l);
        if (!unionMap.has(norm)) unionMap.set(norm, l);
      });

      const checkboxItems = Array.from(unionMap.values())
        .map(label => ({ label, checked: selectedSet.has(normalizeLabel(label)) }))
        .sort((a, b) => (Number(b.checked) - Number(a.checked)) || a.label.localeCompare(b.label));

      const selectedCount = selectedTagObjs.length;
      const buttonText = selectedCount ? `Filter results (${selectedCount})` : 'Filter results';
      const ariaLabel  = selectedCount
        ? `Change included filters. ${selectedCount} selected.`
        : 'Choose filters to include results';

      const dropdownOpen = !!state.context.dropdownOpen;

      // Keyboard nav inside the custom menu (↑/↓/Enter/Space)
      const handleDropdownKeyDown = (e) => {
        const items = Array.from(__dropdownRefs.menu?.querySelectorAll('.context-dropdown-item') || []);
        const current = document.activeElement;
        let idx = items.indexOf(current);
        if (e.key === 'ArrowDown') {
          e.preventDefault();
          items[(idx + 1) % items.length]?.focus();
        } else if (e.key === 'ArrowUp') {
          e.preventDefault();
          items[(idx - 1 + items.length) % items.length]?.focus();
        } else if (e.key === 'Enter' || e.key === ' ') {
          e.preventDefault();
          const cb = current?.querySelector('input[type="checkbox"]');
          if (cb) {
            cb.checked = !cb.checked;
            window.__algoliaToggleFilter(current.dataset.label, cb.checked);
          }
        }
      };

      // Toggle dropdown through Autocomplete context (so onStateChange runs).
      const setDropdownOpen = (open) => {
        window.__algoliaAutocompleteInstance.setContext({ ...state.context, dropdownOpen: open });
      };

      // The dropdown UI itself (button + menu)
      const dropdown = html`
        <div class="context-dropdown algolia-filters-dropdown" style="display:inline-block;position:relative;z-index:10000;">
          <button
            type="button"
            class="context-dropdown-toggle"
            aria-label=${ariaLabel}
            aria-haspopup="menu"
            aria-expanded="${dropdownOpen}"
            aria-controls="algolia-filters-dropdown-menu"
            ref=${el => (__dropdownRefs.toggle = el)}
            onPointerDown=${e => { e.preventDefault(); e.stopPropagation(); setDropdownOpen(!dropdownOpen); }}
            onClick=${e => e.stopPropagation()}
            onKeyDown=${e => { if (e.key === 'ArrowDown' || e.key === 'Enter' || e.key === ' ') { e.preventDefault(); setDropdownOpen(true); setTimeout(() => { __dropdownRefs.menu?.querySelector('.context-dropdown-item')?.focus(); }, 0); } }}
          >
            <span>${buttonText}</span>
            <span class="context-dropdown-arrow" aria-hidden="true" style="display:inline-block;transition:transform 0.2s ease;${dropdownOpen ? 'transform:rotate(180deg);' : ''}">
              <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M4 6l4 4 4-4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>
            </span>
          </button>

          <ul
            id="algolia-filters-dropdown-menu"
            class="context-dropdown-menu"
            role="menu"
            tabIndex="-1"
            ref=${el => (__dropdownRefs.menu = el)}
            style="min-width:220px;max-height:320px;overflow:auto;display:${dropdownOpen ? 'block' : 'none'};padding:6px 0;"
            onKeyDown=${handleDropdownKeyDown}
          >
            ${
              checkboxItems.length === 0
                ? html`<li class="context-dropdown-item" role="menuitem" tabIndex="0" aria-disabled="true" style="padding:6px 12px;">No facets</li>`
                : checkboxItems.map(item => html`
                  <li
                    class="context-dropdown-item"
                    role="menuitemcheckbox"
                    aria-checked="${item.checked ? 'true' : 'false'}"
                    data-label="${item.label}"
                    tabIndex="0"
                    style="padding:4px 12px;"
                  >
                    <label style="display:flex;gap:8px;align-items:center;cursor:pointer;">
                      <input
                        type="checkbox"
                        checked=${item.checked}
                        onChange=${e => { window.__algoliaToggleFilter(item.label, e.target.checked); }}
                        onPointerDown=${e => e.stopPropagation()}
                      />
                      <span>${item.label}</span>
                    </label>
                  </li>
                `)
            }
            ${
              checkboxItems.length
                ? html`<li style="display:flex;justify-content:space-between;gap:8px;padding:8px 12px;border-top:1px solid rgba(0,0,0,0.08);margin-top:6px;">
                    <button style="color:var(--body-font-color);" type="button"
                      onPointerDown=${e => { e.preventDefault(); e.stopPropagation(); selectedTagObjs.length && __algoliaTagsPlugin.data.setTags([]); }}
                    >Clear all</button>
                    <button style="color:var(--body-font-color);" type="button"
                      onPointerDown=${e => { e.preventDefault(); e.stopPropagation(); setDropdownOpen(false); }}
                    >Close</button>
                  </li>`
                : ''
            }
          </ul>
        </div>
      `;

      /**
       * For API endpoint results we show a tiny example to reduce clicks.
       * This is pure UI enrichment: not required by Algolia.
       */
      const hasEndpoint = !!(preview && (preview.method || preview.path));
      let endpointLine = '';
      let curlExample = '';
      if (hasEndpoint) {
        const method = (preview.method || 'GET').toUpperCase();
        const path = preview.path || '';
        endpointLine = `${method} ${path}`;
        let origin = '';
        try { origin = new URL(preview.url || '').origin; } catch (e) { /* no-op */ }
        curlExample = `curl -X ${method} '${origin ? origin + path : path}'`;
      }

      // Integrate AI assistant with the current query.
      const askAIButton = currentQuery
        ? html`<button
            type="button"
            aria-label=${`Ask AI about "${currentQuery}"`}
            class="ask-ai"
            onClick=${() => {
              if (window.Kapa?.open) {
                window.Kapa.open({ query: currentQuery });
                autocompleteInstance.setIsOpen(false);
              }
            }}
          >
            <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" clip-rule="evenodd" d="M1.01942 4.14696C0.821273 4.07417 0.615365 4.0169 0.403168 3.97662C0.387588 3.97367 0.371975 3.9708 0.356327 3.96802C0.214558 3.94289 0.214558 3.74081 0.356327 3.71568C0.371975 3.7129 0.387588 3.71003 0.403168 3.70709C0.615365 3.6668 0.821273 3.60953 1.01942 3.53675C1.138 3.49318 1.2538 3.44407 1.36651 3.38969C2.14702 3.01321 2.77911 2.38509 3.158 1.60949C3.2127 1.49749 3.26214 1.38242 3.30596 1.26458C3.37921 1.06768 3.43684 0.863067 3.47738 0.652204C3.48035 0.636723 3.48323 0.621208 3.48603 0.605658C3.51132 0.464781 3.71467 0.464781 3.73997 0.605658C3.74277 0.621208 3.74565 0.636723 3.74861 0.652204C3.78916 0.863067 3.84678 1.06768 3.92003 1.26458C3.96387 1.38242 4.01329 1.49749 4.06802 1.60949C4.44688 2.38509 5.07898 3.01321 5.8595 3.38969C5.9722 3.44407 6.088 3.49318 6.20657 3.53675C6.40473 3.60953 6.61063 3.6668 6.82284 3.70709C6.83842 3.71003 6.85402 3.7129 6.86967 3.71568C7.01144 3.74081 7.01144 3.94289 6.86967 3.96802C6.85402 3.9708 6.83842 3.97367 6.82284 3.97662C6.61063 4.0169 6.40473 4.07417 6.20657 4.14696C6.088 4.19052 5.9722 4.23963 5.8595 4.29401C5.07898 4.67049 4.44688 5.29861 4.06802 6.07422C4.01329 6.18622 3.96387 6.30129 3.92003 6.41912C3.84678 6.61602 3.78916 6.82063 3.74861 7.03151C3.74565 7.04697 3.74277 7.06249 3.73997 7.07804C3.71467 7.21893 3.51132 7.21893 3.48603 7.07804C3.48323 7.06249 3.48035 7.04697 3.47738 7.03151C3.43684 6.82063 3.37921 6.61602 3.30596 6.41912C3.26214 6.30129 3.2127 6.18622 3.158 6.07422C2.77911 5.29861 2.14702 4.67049 1.36651 4.29401C1.2538 4.23963 1.138 4.19052 1.01942 4.14696ZM5.75667 9.15294C5.61809 9.11583 5.47758 9.08326 5.3353 9.05541C5.31306 9.05107 5.29079 9.04684 5.26848 9.04271L5.26172 9.04146L5.25257 9.0398C5.23849 9.03725 5.22303 9.03451 5.19212 9.02901L5.18132 9.0271C4.9546 8.98447 4.9546 8.66184 5.18132 8.61921L5.19212 8.6173C5.22303 8.6118 5.23849 8.60906 5.25257 8.60651L5.26172 8.60485L5.26848 8.60361C5.29079 8.59947 5.31306 8.59524 5.33528 8.5909C5.47756 8.56305 5.61809 8.53048 5.75667 8.49337C5.87504 8.46168 5.992 8.42664 6.10746 8.38841C7.9755 7.76963 9.44545 6.30893 10.0681 4.45264C10.1066 4.33791 10.1419 4.22168 10.1738 4.10403C10.2111 3.96634 10.2439 3.8267 10.2719 3.68531C10.2763 3.66323 10.2805 3.6411 10.2847 3.61894L10.286 3.61221L10.2876 3.60312C10.2902 3.5893 10.2929 3.57413 10.2983 3.54409L10.2985 3.54306L10.3004 3.53232C10.3433 3.30702 10.668 3.30702 10.7109 3.53232L10.7128 3.54306C10.7183 3.57377 10.7211 3.58913 10.7237 3.60312L10.7253 3.61221L10.7266 3.61894C10.7307 3.6411 10.735 3.66323 10.7394 3.68531C10.7674 3.82672 10.8002 3.96634 10.8375 4.10403C10.8694 4.22168 10.9047 4.33791 10.9431 4.45264C11.5658 6.30893 13.0358 7.76963 14.9038 8.38841C15.0193 8.42664 15.1362 8.46168 15.2546 8.49337C15.3932 8.53048 15.5337 8.56305 15.676 8.5909C15.6982 8.59524 15.7205 8.59947 15.7428 8.60361L15.7496 8.60485L15.7587 8.60651C15.7728 8.60906 15.7882 8.6118 15.8192 8.6173L15.83 8.61921C16.0567 8.66184 16.0567 8.98447 15.83 9.0271L15.8192 9.02901L15.7864 9.03482L15.7587 9.0398L15.7496 9.04146L15.7428 9.04271C15.7205 9.04684 15.6982 9.05107 15.676 9.05541C15.5337 9.08326 15.3932 9.11583 15.2546 9.15294C15.1362 9.18463 15.0193 9.21967 14.9038 9.2579C13.0358 9.87668 11.5658 11.3374 10.9431 13.1937C10.9047 13.3084 10.8694 13.4246 10.8375 13.5423C10.8002 13.68 10.7674 13.8196 10.7394 13.961C10.735 13.9831 10.7307 14.0052 10.7266 14.0274L10.7253 14.0341L10.7237 14.0432L10.7199 14.0637L10.713 14.1021L10.7109 14.114C10.668 14.3393 10.3433 14.3393 10.3004 14.114L10.2985 14.1033C10.293 14.0726 10.2902 14.0572 10.2876 14.0432L10.286 14.0341L10.2847 14.0274C10.2805 14.0052 10.2763 13.9831 10.2719 13.961C10.2439 13.8196 10.2111 13.68 10.1738 13.5423C10.1419 13.4246 10.1066 13.3084 10.0681 13.1937C9.44545 11.3374 7.9755 9.87668 6.10746 9.2579C5.992 9.21967 5.87504 9.18463 5.75667 9.15294ZM2.63009 13.4745C2.86838 13.5197 3.09411 13.5989 3.30206 13.7067C3.39456 13.7547 3.48354 13.8084 3.56853 13.8673C3.80536 14.0313 4.01129 14.236 4.17642 14.4713C4.23567 14.5558 4.28969 14.6442 4.33796 14.7361C4.44653 14.9428 4.52617 15.1671 4.57168 15.4039C4.57356 15.4137 4.5754 15.4234 4.57715 15.4333C4.59313 15.5222 4.72156 15.5222 4.73754 15.4333C4.7393 15.4234 4.74111 15.4137 4.74299 15.4039C4.78853 15.1671 4.86817 14.9428 4.97672 14.7361C5.02501 14.6442 5.07902 14.5558 5.13828 14.4713C5.30339 14.236 5.50933 14.0313 5.74616 13.8673C5.83115 13.8084 5.92013 13.7547 6.01262 13.7067C6.22059 13.5989 6.44631 13.5197 6.68461 13.4745C6.69445 13.4726 6.7043 13.4708 6.71418 13.469C6.80373 13.4532 6.80373 13.3255 6.71418 13.3097C6.7043 13.3079 6.69445 13.3061 6.68461 13.3042C6.44631 13.259 6.22059 13.1798 6.01262 13.072C5.92013 13.024 5.83115 12.9703 5.74616 12.9114C5.50933 12.7474 5.30339 12.5427 5.13828 12.3074C5.07902 12.2229 5.02501 12.1345 4.97672 12.0426C4.86817 11.836 4.78853 11.6116 4.74299 11.3748C4.74111 11.3651 4.7393 11.3553 4.73754 11.3454C4.72156 11.2565 4.59313 11.2565 4.57715 11.3454C4.5754 11.3553 4.57356 11.3651 4.57168 11.3748C4.52617 11.6116 4.44653 11.836 4.33796 12.0426C4.28969 12.1345 4.23567 12.2229 4.17642 12.3074C4.01129 12.5427 3.80536 12.7474 3.56853 12.9114C3.48354 12.9703 3.39456 13.024 3.30206 13.072C3.09411 13.1798 2.86838 13.259 2.63009 13.3042C2.62025 13.3061 2.61039 13.3079 2.60049 13.3097C2.51097 13.3255 2.51097 13.4532 2.60049 13.469C2.61039 13.4708 2.62025 13.4726 2.63009 13.4745Z" fill="white"/>
          </svg>
            Ask AI about "${currentQuery}"
          </button>`
        : '';

      // Compose a “View all results” link that respects product + version context.
      const componentTitle = '{{{page.component.title}}}';
      const productParams = (() => {
        if (componentTitle === 'Cloud') return '&product[0]=Cloud&product[1]=Connect';
        if (componentTitle === 'Self-Managed') return '&product[0]=Self-Managed&product[1]=Connect';
        return '';
      })();
      const viewAllLink = currentQuery
        ? html`<a
            class="view-all"
            href="{{{relativize '/search' }}}?q=${encodeURIComponent(currentQuery)}${VERSION ? `&version=${VERSION}` : ''}${productParams}"
          >
            View all results
          </a>`
        : '';

      // Layout: header (filters/AI), results list, right-side preview, footer tips.
      render(
        html`<div class="aa-Header">
          ${dropdown}
          ${askAIButton}
        </div>
        <div class="aa-Grid">
          <div class="aa-Results aa-Column--scrollable">${children}</div>
          ${
            preview
              ? html`<div class="aa-Preview aa-Column doc">
                  <div class="aa-PanelLayout aa-Panel--scrollable">
                    ${
                      preview.breadcrumbs
                        ? html`<div class="breadcrumbs">
                            <ul>
                              ${preview.breadcrumbs.map(
                                (breadcrumb) =>
                                  html`<li>
                                    <a
                                      onClick=${(event) => {
                                        event.stopPropagation();
                                        // Click analytics requires clickAnalytics: true and a queryID.
                                        // Docs: https://www.algolia.com/doc/api-reference/api-parameters/clickAnalytics/
                                        aa('clickedObjectIDsAfterSearch', {
                                          eventName: 'Preview Selected',
                                          index: state.context.preview.__autocomplete_indexName,
                                          queryID: state.context.preview.__autocomplete_queryID,
                                          objectIDs: [state.context.preview.objectID],
                                          positions: [state.activeItemId + 1], // positions start at 1
                                        });
                                      }}
                                      href="${breadcrumb.u}"
                                    >
                                      ${breadcrumb.t}
                                    </a>
                                  </li>`
                              )}
                            </ul>
                          </div>`
                        : ''
                    }
                    <h3>${components.Highlight({ hit: preview, attribute: 'title' })}</h3>
                    <p>${
                      preview.intro
                        ? components.Highlight({ hit: preview, attribute: 'intro' })
                        : preview.description
                        ? components.Highlight({ hit: preview, attribute: 'description' })
                        : ''
                    }</p>
                    ${ preview.api ? html`<div class="aa-ItemContentRow"><div class="aa-ItemContentTitle result-type">${preview.api}</div></div>` : '' }
                    ${ hasEndpoint ? html`<div class="endpoint-example">
                        <h4>Endpoint</h4>
                        <pre><code>${endpointLine}</code></pre>
                        <h4>Example</h4>
                        <pre><code>${curlExample}</code></pre>
                      </div>` : '' }
                    ${
                      preview.image
                        ? html`<div class="aa-ItemIcon">
                            ${
                              SUPPORTED_PREVIEW_TYPES.includes((preview.type || '').toLowerCase())
                                ? html`<a
                                    onClick=${(event) => {
                                      event.stopPropagation();
                                      aa('clickedObjectIDsAfterSearch', {
                                        eventName: 'Preview Selected',
                                        index: state.context.preview.__autocomplete_indexName,
                                        queryID: state.context.preview.__autocomplete_queryID,
                                        objectIDs: [state.context.preview.objectID],
                                        positions: [state.activeItemId + 1],
                                      });
                                    }}
                                    href="${preview.url || preview.objectID}"
                                  >
                                    <img src="${preview.image}" alt="${preview.title || ''}" />
                                  </a>`
                                : html`<a
                                    onClick=${(event) => {
                                      event.stopPropagation();
                                      aa('clickedObjectIDsAfterSearch', {
                                        eventName: 'Preview Selected',
                                        index: state.context.preview.__autocomplete_indexName,
                                        queryID: state.context.preview.__autocomplete_queryID,
                                        objectIDs: [state.context.preview.objectID],
                                        positions: [state.activeItemId + 1],
                                      });
                                    }}
                                    target="_blank" rel="noopener noreferrer"
                                    href="${preview.url || preview.objectID}"
                                  >
                                    <img src="${preview.image}" alt="${preview.title || ''}" />
                                  </a>`
                            }
                          </div>`
                        : ''
                    }
                    <div class="toc sidebar">
                      <div class="toc-menu">
                        ${preview.titles && preview.titles.length > 0 ? html`<h4>On this page</h4>` : ''}
                        <ul>
                          ${(preview.titles || []).slice(0, 15).map(
                            (title) => html`<li>
                              ${
                                SUPPORTED_PREVIEW_TYPES.includes((state.context.preview.type || '').toLowerCase())
                                  ? html`<a
                                        onClick=${(event) => {
                                          event.stopPropagation();
                                          aa('clickedObjectIDsAfterSearch', {
                                            eventName: 'Preview Selected',
                                            index: state.context.preview.__autocomplete_indexName,
                                            queryID: state.context.preview.__autocomplete_queryID,
                                            objectIDs: [state.context.preview.objectID],
                                            positions: [state.activeItemId + 1],
                                          });
                                        }}
                                        href="${(preview.url || preview.objectID)}#${title.h}"
                                      >
                                        ${components.Highlight({ hit: title, attribute: 't' })}
                                      </a>`
                                  : html`<a
                                        onClick=${(event) => {
                                          event.stopPropagation();
                                          aa('clickedObjectIDsAfterSearch', {
                                            eventName: 'Preview Selected',
                                            index: state.context.preview.__autocomplete_indexName,
                                            queryID: state.context.preview.__autocomplete_queryID,
                                            objectIDs: [state.context.preview.objectID],
                                            positions: [state.activeItemId + 1],
                                          });
                                        }}
                                        target="_blank" rel="noopener noreferrer"
                                        href="${(preview.url || preview.objectID)}#${title.h}"
                                      >
                                        ${components.Highlight({ hit: title, attribute: 't' })}
                                      </a>`
                              }
                            </li>`
                          )}
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>
                <footer class="search-footer">
                  <ul class="search-commands">
                    <li><kbd class="algolia-command" aria-label="Enter to select">⏎</kbd><span class="algolia-label">to select</span></li>
                    <li><kbd class="algolia-command">↓</kbd><kbd class="algolia-command">↑</kbd><span class="algolia-label">to navigate</span></li>
                    <li><kbd class="algolia-command">Esc</kbd><span class="algolia-label">to close</span></li>
                  </ul>
                  ${viewAllLink}
                </footer>`
              : ''
          }
        </div>`,
        root
      );
    },

    /**
     * Define our data sources:
     *  - "filters": facet values for the _tags facet (used by the tags plugin)
     *  - "docs":    actual content/hits
     * Sources overview: https://www.algolia.com/doc/ui-libraries/autocomplete/core-concepts/sources/
     */
    getSources({ query, state }) {
      const tagsByFacet = groupBy(state.context.tagsPlugin.tags, (tag) => tag.facet);
      return [
        {
          sourceId: 'filters',
          getItems() {
            // Fetch facet values for _tags to populate the checkbox menu.
            // getAlgoliaFacets: https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/sources/#param-getalgoliafacets
            return getAlgoliaFacets({
              searchClient,
              queries: [
                {
                  indexName: '{{{env.ALGOLIA_INDEX_NAME}}}',
                  facet: '_tags',
                  params: {
                    facetQuery: '',     // https://www.algolia.com/doc/api-reference/api-parameters/facetQuery/
                    maxFacetHits: 50,   // https://www.algolia.com/doc/api-reference/api-parameters/maxFacetHits/
                  },
                },
              ],
              transformResponse({ facetHits }) {
                // We return raw server facets; union with known+selected happens in render().
                const server = (facetHits[0] || []).map(h => ({ label: h.label, facet: '_tags' }));
                return server;
              },
            });
          },
          templates: {
            header() { return null; },
            item() { return null; },
          },
        },

        {
          sourceId: 'docs',
          getItems() {
            // getAlgoliaResults: https://www.algolia.com/doc/ui-libraries/autocomplete/api-reference/sources/#param-getalgoliaresults
            return getAlgoliaResults({
              searchClient,
              queries: [
                {
                  indexName: '{{{env.ALGOLIA_INDEX_NAME}}}',
                  query,
                  params: {
                    clickAnalytics: true,           // https://www.algolia.com/doc/api-reference/api-parameters/clickAnalytics/
                    hitsPerPage: 10,                // https://www.algolia.com/doc/api-reference/api-parameters/hitsPerPage/
                    attributesToSnippet: ['*:25'],  // https://www.algolia.com/doc/api-reference/api-parameters/attributesToSnippet/
                    snippetEllipsisText: '…',       // https://www.algolia.com/doc/api-reference/api-parameters/snippetEllipsisText/
                    tagFilters: mapToAlgoliaFilters(tagsByFacet), // https://www.algolia.com/doc/api-reference/api-parameters/tagFilters/
                  },
                },
              ],
              transformResponse({ hits }) {
                // Re-order mixed hits so Docs stay in place while non-Doc items
                // are time-sorted, and compute a matchingHeading to deep-link
                // to the best title match.
                return hits.map((nestedHits) => {
                  const docIndices = new Map();
                  nestedHits.forEach((item, index) => {
                    if (item.type === 'Doc') {
                      docIndices.set(index, item);
                    }
                  });

                  const nonDocItems = nestedHits
                    .filter((item) => item.type !== 'Doc')
                    .sort((a, b) => (b.unixTimestamp ?? -Infinity) - (a.unixTimestamp ?? -Infinity));

                  let nonDocIndex = 0;

                  docIndices.forEach((item, index) => {
                    if (item._highlightResult && item._highlightResult.titles) {
                      const matchedIndex = item._highlightResult.titles.findIndex(
                        (title) => title.t.matchLevel === 'full'
                      );
                      if (matchedIndex !== -1) {
                        const matchedTopLevelTitle = item.titles[matchedIndex];
                        if (matchedTopLevelTitle) {
                          item.matchingHeading = `#${matchedTopLevelTitle.h}`;
                        }
                      }
                    }
                    nestedHits[index] = item;
                  });

                  return nestedHits.map((item, index) =>
                    docIndices.has(index) ? docIndices.get(index) : nonDocItems[nonDocIndex++]
                  );
                });
              },
            });
          },
          templates: {
            noResults({ state, html }) {
              // Clear preview so we don’t show stale content for a query with no hits.
              state.context.preview = null;
              if (!state.query) return;
              return html`
                <div>No results for ${state.query}</div>
                <p>
                  Believe this query should return results?
                  <a target="_blank" rel="noopener noreferrer" href="https://github.com/redpanda-data/documentation/issues/new?title=No%20search%20results%20for%20${state.query}">
                    Let us know
                  </a>.
                </p>`;
            },
            header({ items, html }) {
              if (!items.length) return;
              return html`
                <span class="aa-SourceHeaderTitle">Results</span>
                <div class="aa-SourceHeaderLine"></div>`;
            },
            item({ item, components, html }) {
              const matchingHeading = item.matchingHeading || '';

              // Helper: render “product” as deduped badges
              const renderProduct = (product) => {
                if (Array.isArray(product)) {
                  const seen = new Set();
                  return product
                    .filter(p => { const k = (p || '').toLowerCase(); if (seen.has(k)) return false; seen.add(k); return true; })
                    .map(p => html`<div class="aa-ItemContentTitle result-type">${p}</div>`);
                } else if (product) {
                  return html`<div class="aa-ItemContentTitle result-type">${product}</div>`;
                }
                return null;
              };

              // If previewable, navigate within the panel; otherwise open a new tab.
              const aTag = SUPPORTED_PREVIEW_TYPES.includes((item.type || '').toLowerCase())
                ? html`<a class="aa-ItemLink" href="${item.url || item.objectID}${matchingHeading}">
                    <div class="aa-ItemContent">
                      <div class="aa-ItemContentBody">
                        <div class="aa-ItemContentRow">
                          <div class="aa-ItemContentTitle">
                            ${components.Highlight({ hit: item, attribute: 'title' })}
                          </div>
                        </div>
                        ${
                          item.text
                            ? html`<div class="aa-ItemContentSnippet">${
                                item.text
                                  ? components.Snippet({ hit: item, attribute: 'text' })
                                  : item.intro
                                  ? components.Snippet({ hit: item, attribute: 'intro' })
                                  : item.description
                                  ? components.Snippet({ hit: item, attribute: 'description' })
                                  : ''
                              }</div>`
                            : html`<div class="aa-ItemContentSnippet">${
                                item.intro
                                  ? components.Snippet({ hit: item, attribute: 'intro' })
                                  : item.description
                                  ? components.Snippet({ hit: item, attribute: 'description' })
                                  : ''
                              }</div>`
                        }
                        <div class="aa-ItemContentRow">
                          <div class="aa-ItemContentTitle result-type">${item.type}</div>
                          ${renderProduct(item.product)}
                          ${item.api ? html`<div class="aa-ItemContentTitle result-type">${item.api}</div>` : ''}
                          ${item.version ? html`<div class="aa-ItemContentTitle result-type">${item.version}</div>` : ''}
                        </div>
                      </div>
                      <div class="aa-ItemActions">
                        <button class="aa-ItemActionButton aa-DesktopOnly aa-ActiveOnly" type="button" aria-label="Open page" title="Open page">
                          <svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M18.984 6.984h2.016v6H5.812l3.609 3.609-1.406 1.406-6-6 6-6 1.406 1.406L5.812 7.97H18.984V3.94z" /></svg>
                        </button>
                      </div>
                    </div>
                  </a>`
                : html`<a target="_blank" rel="noopener noreferrer" class="aa-ItemLink" href="${item.url || item.objectID}">
                    <div class="aa-ItemContent">
                      <div class="aa-ItemContentBody">
                        <div class="aa-ItemContentRow">
                          <div class="aa-ItemContentTitle">
                            ${components.Highlight({ hit: item, attribute: 'title' })}
                          </div>
                        </div>
                        ${
                          item.breadcrumbs
                            ? html`<div class="aa-ItemContentRow">
                                <div class="aa-Breadcrumbs">
                                  <ul>
                                    ${
                                      item.breadcrumbs.length > 2 &&
                                      item.breadcrumbs
                                        .slice(1, item.breadcrumbs.length - 1)
                                        .map((breadcrumb) => html`<li>${breadcrumb.t}</li>`)
                                    }
                                    ${
                                      item.breadcrumbs.length === 2 &&
                                      item.breadcrumbs.slice(1).map((breadcrumb) => html`<li>${breadcrumb.t}</li>`)
                                    }
                                  </ul>
                                </div>
                              </div>`
                            : ''
                        }
                        <div class="aa-ItemContentSnippet">${
                          item.text
                            ? components.Snippet({ hit: item, attribute: 'text' })
                            : item.intro
                            ? components.Snippet({ hit: item, attribute: 'intro' })
                            : item.description
                            ? components.Snippet({ hit: item, attribute: 'description' })
                            : ''
                        }</div>
                        <div class="aa-ItemContentRow">
                          <div class="aa-ItemContentTitle result-type">${item.type}</div>
                          ${renderProduct(item.product)}
                          ${item.version ? html`<div class="aa-ItemContentTitle result-type">${item.version}</div>` : ''}
                        </div>
                      </div>
                      <div class="aa-ItemActions">
                        <button class="aa-ItemActionButton aa-DesktopOnly aa-ActiveOnly" type="button" aria-label="Open page" title="Open page">
                          <svg viewBox="0 0 24 24" width="20" height="20" fill="currentColor"><path d="M18.984 6.984h2.016v6H5.812l3.609 3.609-1.406 1.406-6-6 6-6 1.406 1.406L5.812 7.97H18.984V3.94z" /></svg>
                        </button>
                      </div>
                    </div>
                  </a>`;
              return html`${aTag}`;
            },
          },
          getItemUrl({ item }) { return item.url || item.objectID; },
          onActive({ item, setContext, state }) {
            const ctx = state?.context || {};
            setContext({ ...ctx, preview: item });
          },
        }
      ];
    },
  });

  /**
   * Expose the Autocomplete instance globally so other UI (our custom dropdown)
   * can drive its context without capturing stale references across re-renders.
   * This is intentionally namespaced and “private”. See notes below.
   */
  window.__algoliaAutocompleteInstance = autocompleteInstance;
});
</script>
