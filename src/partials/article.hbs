<article class="doc {{#if page.attributes.no-toc}}no-toc{{/if}}">
{{#if (ne page.attributes.role 'home')}}
{{> breadcrumbs}}
{{/if}}
{{#unless page.attributes.cloud}}
{{> latest-banner}}
{{/unless}}
{{#if (eq page.attributes.role 'bloblang-playground')}}
{{> bloblang-signup-form}}
{{/if}}
{{#if (eq page.attributes.role 'home')}}
  {{> home}}
  {{page.contents}}
{{else}}
  {{#with page.title}}
    <h1 class="page">{{{this}}}</h1>
  {{/with}}
{{/if}}
<div class="metadata metadata--main">
  {{#if page.attributes.beta}}
    <div class="beta-label">
      <p>beta</p>
    </div>
  {{/if}}
  {{#if page.attributes.context-switcher}}
    {{> context-switcher}}
  {{/if}}
</div>
{{#if (or page.attributes.beta page.attributes.context-switcher)}}
  <script>
  document.addEventListener("DOMContentLoaded", () => {
    const metadataContainer = document.querySelector(".metadata--main");
    const navMetadataContainer = document.querySelector(".metadata--nav");

    if (!metadataContainer || !navMetadataContainer) {
      return;
    }

    // Initialize tooltips for beta badges if present
    const topBadge = metadataContainer.querySelector(".beta-label p");
    const navBadge = navMetadataContainer.querySelector(".nav-beta-label");
    // DEBUG: If you need to debug Tippy.js tooltips in Chrome DevTools, note that the "force element state"
    // feature doesn't work with JavaScript-based hover effects. Instead, use the Console to manually trigger events:
    // document.querySelector('.beta-label p').dispatchEvent(new MouseEvent('mouseenter', { bubbles: true }));
    // This will show the tooltip without needing to hover, making it easier to inspect the generated DOM.
    if (topBadge && navBadge) {
      tippy(topBadge, {
        content: "{{page.attributes.beta-text}}",
        animation: "scale",
        theme: "redpanda-term",
        touch: "hold",
        interactive: true,
        allowHTML: true,
      });
      tippy(navBadge, {
        content: "{{page.attributes.beta-text}}",
        animation: "scale",
        theme: "redpanda-term",
        touch: "hold",
        interactive: true,
        allowHTML: true,
      });
    }

    // Show nav metadata when main metadata is not visible
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navMetadataContainer.classList.add("hidden");
        } else {
          navMetadataContainer.classList.remove("hidden");
        }
      });
    }, {
      root: null,
      threshold: 0.1 // Trigger when 10% of the container is visible
    });

    observer.observe(metadataContainer);
  });
  </script>
{{/if}}
{{#if page.attributes.console-config-migrator}}
{{> console-config-migrator}}
{{/if}}
{{#if (eq page.attributes.role 'component-home')}}
  {{> component-home}}
{{else if (eq page.attributes.role 'component-home-v2')}}
  {{> component-home-v2}}
{{else if (eq page.attributes.role 'bloblang-playground')}}
  {{> bloblang-playground}}
{{else if (eq page.attributes.role 'index-list')}}
  {{> index-list}}
{{else if (eq page.layout 'index')}}
  {{> index}}
{{else if (eq page.attributes.role 'related-labs')}}
  {{#with (list-related-labs page.title page.attributes page.contents)  as |listLabs|}}
    {{{listLabs}}}
  {{/with}}
{{else}}
  {{#with (add-suggested-labs page.attributes page.contents)  as |suggestedLabs|}}
    {{{suggestedLabs}}}
  {{/with}}
{{/if}}
{{#if (ne page.attributes.role 'home')}}
{{> back-to-top}}
{{/if}}
{{> feedback-footer}}
{{> pagination}}
{{> tracking-pixel}}
</article>
