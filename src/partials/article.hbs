<article class="doc {{#if page.attributes.no-toc}}no-toc{{/if}}">
{{#if (ne page.attributes.role 'home')}}
{{> breadcrumbs}}
{{/if}}
{{#unless page.attributes.cloud}}
{{> latest-banner}}
{{/unless}}
{{#if (eq page.attributes.role 'bloblang-playground')}}
{{> bloblang-signup-form}}
{{/if}}
{{#if (eq page.attributes.role 'home')}}
  <div class="home-header-container">
    <div class="home-header">
      {{#with page.title}}
        <h1 class="page">{{{this}}}</h1>
      {{/with}}
      <div class="ask">
        {{> ai-button}}
        <div> or </div>
        <div class="autocomplete" id="autocomplete"></div>
      </div>
    </div>
  </div>
{{else}}
  {{#with page.title}}
    <h1 class="page">{{{this}}}</h1>
  {{/with}}
{{/if}}
{{#if page.attributes.beta}}
  <div class="beta-label">
    <p>beta</p>
  </div>
  <script>
  document.addEventListener("DOMContentLoaded", () => {
    const topBadge = document.querySelector(".beta-label p");
    const navBadge = document.querySelector(".nav-beta-label");

    if (!topBadge || !navBadge) {
      return;
    }
    tippy(navBadge, {
      content:
        "This feature is in beta. Features in beta are available for testing and feedback. They are not supported by Redpanda and should not be used in production environments.",
      animation: "scale",
      theme: "redpanda-term",
      touch: "hold",
      interactive: true,
      allowHTML: true,
    });
    tippy(topBadge, {
      content:
        "This feature is in beta. Features in beta are available for testing and feedback. They are not supported by Redpanda and should not be used in production environments.",
      animation: "scale",
      theme: "redpanda-term",
      touch: "hold",
      interactive: true,
      allowHTML: true,
    });
    const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        navBadge.classList.remove("visible");
      } else {
        navBadge.classList.add("visible");
      }
    });
  }, {
    root: null,
    threshold: 1.0
  });

  observer.observe(topBadge);
  });
  </script>
{{/if}}
{{#if page.attributes.console-config-migrator}}
{{> console-config-migrator}}
{{/if}}
{{#if (eq page.attributes.role 'home')}}
  {{> home}}
  {{{page.contents}}}
{{else if (eq page.attributes.role 'component-home')}}
  {{> component-home}}
{{else if (eq page.attributes.role 'component-home-v2')}}
  {{> component-home-v2}}
{{else if (eq page.attributes.role 'bloblang-playground')}}
  {{> bloblang-playground}}
{{else if (eq page.attributes.role 'index-list')}}
  {{> index-list}}
{{else if (eq page.layout 'index')}}
  {{> index}}
{{else if (eq page.attributes.role 'related-labs')}}
  {{#with (list-related-labs page.title page.attributes page.contents)  as |listLabs|}}
    {{{listLabs}}}
  {{/with}}
{{else}}
  <!--
  Removing context switchers for now
  while we evaluate their usefulness
  {{> context-switcher}}
  -->
  {{#with (add-suggested-labs page.attributes page.contents)  as |suggestedLabs|}}
    {{{suggestedLabs}}}
  {{/with}}
{{/if}}
{{#if (ne page.attributes.role 'home')}}
{{> back-to-top}}
{{/if}}
{{> feedback-footer}}
{{> pagination}}
{{> tracking-pixel}}
</article>
